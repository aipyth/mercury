/*! normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css */html{line-height:1.15;-webkit-text-size-adjust:100%}body{margin:0}main{display:block}h1{font-size:2em;margin:.67em 0}hr{box-sizing:content-box;height:0;overflow:visible}pre{font-family:monospace,monospace;font-size:1em}a{background-color:transparent}abbr[title]{border-bottom:none;text-decoration:underline;-webkit-text-decoration:underline dotted;text-decoration:underline dotted}b,strong{font-weight:bolder}code,kbd,samp{font-family:monospace,monospace;font-size:1em}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sub{bottom:-.25em}sup{top:-.5em}img{border-style:none}button,input,optgroup,select,textarea{font-family:inherit;font-size:100%;line-height:1.15;margin:0}button,input{overflow:visible}button,select{text-transform:none}[type=button],[type=reset],[type=submit],button{-webkit-appearance:button}[type=button]::-moz-focus-inner,[type=reset]::-moz-focus-inner,[type=submit]::-moz-focus-inner,button::-moz-focus-inner{border-style:none;padding:0}[type=button]:-moz-focusring,[type=reset]:-moz-focusring,[type=submit]:-moz-focusring,button:-moz-focusring{outline:1px dotted ButtonText}fieldset{padding:.35em .75em .625em}legend{box-sizing:border-box;color:inherit;display:table;max-width:100%;padding:0;white-space:normal}progress{vertical-align:baseline}textarea{overflow:auto}[type=checkbox],[type=radio]{box-sizing:border-box;padding:0}[type=number]::-webkit-inner-spin-button,[type=number]::-webkit-outer-spin-button{height:auto}[type=search]{-webkit-appearance:textfield;outline-offset:-2px}[type=search]::-webkit-search-decoration{-webkit-appearance:none}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}details{display:block}summary{display:list-item}template{display:none}[hidden]{display:none}body{background-color:#f7f5ef}body h2,body h3,body h4,body h5,body p{color:#2c2808;margin:0}body a{text-decoration:none;color:#2c2808;cursor:pointer}.header{padding:0 10px;background-color:#b5fed9;display:flex;max-height:10vh;padding:10px;border-radius:0 0 30px 30px;border-bottom:1px solid #98cbb4;box-shadow:-2px 0 20px 2px #98cbb4;color:#474935}.header .logo{flex-basis:55%;display:flex;align-items:center;justify-content:start}.header .logo h3{margin:0;font-size:30px;border-right:2px solid #474935;padding:8px;padding-left:12px;padding-right:12px}.header .logo h3:last-child{border-right:none}.header .logo img{width:73px;height:73px;margin:-10px 0;margin-right:20px;border-radius:20px;border:2px solid #474935;margin-left:8%}.header .menu{flex-basis:37%;display:flex;margin-right:5%;margin-bottom:-10px;display:flex;flex-flow:row-reverse;align-items:center}.header .menu a{margin-left:20px;display:flex;align-items:center;height:100%;transition:all .5s ease;box-sizing:border-box;border-top:0 solid #b5fed9}.header .menu a:hover{box-shadow:inset 0 -4px 0 0 #423b0b}.header .menu .men-button{font-size:20px;font-weight:700;color:#423b0b}.content{height:86vh;display:flex;width:95%;margin:0 auto}.content .left-side{flex-basis:40%;padding:10px;display:flex;flex-flow:column}.content .left-side .shedule-main{border-radius:20px;background-color:#7ba09879;box-shadow:0 0 10px 5px rgba(206,110,110,.2);padding:10px;margin:20px;flex-basis:100%}.content .left-side .shedule-main .head{display:flex;justify-content:center;background-color:#474935;border-radius:20px 20px 0 0}.content .left-side .shedule-main .head h2{color:#98cbb4}.content .left-side .shedule-main .subjects .subj-section{display:flex;color:#2c2808}.content .left-side .shedule-main .subjects .subj-section .num{display:flex;flex-basis:10%;justify-content:center}.content .left-side .shedule-main .subjects .subj-section .name{display:flex;flex-basis:60%;justify-content:center}.content .left-side .shedule-main .subjects .subj-section .time{display:flex;flex-basis:30%;justify-content:center}.content .left-side .shedule-main .subjects .subj-section:last-child{border-bottom:none}.content .left-side .shedule-main .head{margin:-10px;font-size:20px;padding-top:7px;padding-bottom:7px}.content .left-side .shedule-main .subjects{margin-top:20px;padding-left:15px;padding-right:15px}.content .left-side .shedule-main .subjects .subj-section{display:flex;border-bottom:1.5px solid #423b0b;font-size:18px;padding:4px 0}.content .left-side .shedule-main .subjects .subj-section .num{padding:5px}.content .left-side .shedule-main .subjects .subj-section .name{padding:5px}.content .left-side .shedule-main .subjects .subj-section .time{padding:5px}.content .left-side .shedule-main .tasks{color:#2c2808;padding-left:10px;padding-right:10px}.content .left-side .shedule-main .tasks .tasks-head{display:flex;justify-content:center}.content .left-side .shedule-main .tasks .tasks-head h4{margin:10px;font-size:20px}.content .left-side .shedule-main .tasks .task{padding:5px}.content .left-side .shedule-main .tasks .task h5{font-size:18px;margin-bottom:5px}.content .left-side .shedule-main .tasks .task p{font-size:14px;margin-left:10px}.content .right-side{padding-top:10px;flex-basis:60%;display:flex;flex-wrap:wrap;justify-content:start;margin-left:15px}.content .right-side .shedule{flex-basis:29%;margin:12px;border-radius:20px;background-color:#7ba09879;box-shadow:0 0 10px 5px rgba(206,110,110,.2);transition:all .5s ease}.content .right-side .shedule .head{display:flex;justify-content:center;background-color:#474935;border-radius:20px 20px 0 0}.content .right-side .shedule .head h2{color:#98cbb4}.content .right-side .shedule .subjects .subj-section{display:flex;color:#2c2808}.content .right-side .shedule .subjects .subj-section .num{display:flex;flex-basis:10%;justify-content:center}.content .right-side .shedule .subjects .subj-section .name{display:flex;flex-basis:60%;justify-content:center}.content .right-side .shedule .subjects .subj-section .time{display:flex;flex-basis:30%;justify-content:center}.content .right-side .shedule .subjects .subj-section:last-child{border-bottom:none}.content .right-side .shedule .head{padding-bottom:5px;padding-top:5px}.content .right-side .shedule .subjects{font-size:16px;margin-top:10px;margin:5px 15px}.content .right-side .shedule .subjects .subj-section{position:relative;padding:4px 0;border-bottom:1px solid #423b0b}.content .right-side .shedule .subjects .subj-section .name{flex-basis:100%;justify-content:start;padding-left:10px}.content .right-side .shedule .subjects .subj-section .error{font-size:12px!important;color:red!important}.content .right-side .shedule:hover{transform:scale(1.05);cursor:pointer}.content .right-side .nextweek-field{display:flex;flex-basis:33%;align-items:flex-end;justify-content:center}.content .right-side .nextweek-field .nextweek-button{display:flex;padding:40px;font-size:25px;color:#474935}.content .right-side .nextweek-field .nextweek-button span{display:inline-block;transition:all .6s ease;padding:2px 10px;font-size:28px}.content .right-side .nextweek-field .nextweek-button #prevweek{order:-1}.content .right-side .nextweek-field .nextweek-button #nextweek:hover{cursor:pointer;transform:translateX(5px)}.content .right-side .nextweek-field .nextweek-button #prevweek:hover{cursor:pointer;transform:translateX(-5px)}.content .right-side .nextweek-field .nextweek-button .thisweekhiden{display:none}.modal{display:flex;visibility:hidden;position:fixed;top:0;bottom:0;left:0;right:0;background:rgba(0,0,0,.65);justify-content:center;align-items:ceter;opacity:0;transition:visibility 0s ease,opacity .3s ease}.modal .sign-up{display:flex;flex-direction:column;justify-content:center;flex-basis:content}.modal .sign-up .hidden{display:none}.modal .sign-up .sign-block{border-radius:20px;background-color:#7ba09879;box-shadow:0 0 10px 5px rgba(206,110,110,.2);background-color:#abb8ad;min-width:500px;padding:25px;position:relative}.modal .sign-up .sign-block h2{color:#474935;text-align:center;font-size:35px}.modal .sign-up .sign-block .cross{display:inline-block;position:absolute;right:4%;top:4%;padding:5px;color:rgba(0,0,0,.5)}.modal .sign-up .sign-block .cross span{font-size:25px}.modal .sign-up .sign-block .cross:hover{color:rgba(0,0,0,.9);cursor:pointer}.modal .sign-up .sign-block .sign-head{font-size:30px;padding-bottom:10px;border-bottom:3px solid #474935;margin:0 40px}.modal .sign-up .sign-block .sign-form{padding-top:50px;padding-bottom:30px;border-bottom:3px solid #474935;margin:0 40px;margin-bottom:37px;justify-content:center}.modal .sign-up .sign-block .sign-form #sign-errors p{color:red!important;padding-left:20px;font-size:15px}.modal .sign-up .sign-block .sign-form .form{display:flex;margin-bottom:30px;justify-content:center}.modal .sign-up .sign-block .sign-form .form input{flex-basis:90%;font-size:20px;border-radius:10px;border:1px solid #2c2808;padding:5px;background-color:#edf5f1;transition:box-shadow .3s ease}.modal .sign-up .sign-block .sign-form .form input:focus{border-radius:10px;box-shadow:0 0 0 4px solid #2c2808;outline:0}.modal .sign-up .sign-block .sign-form a{border-radius:15px;font-size:25px;background-color:#b5fed9;display:block;width:75%;margin:0 auto;margin-top:40px!important;opacity:.8}.modal .sign-up .sign-block .sign-form a h4{padding:5px;text-align:center;color:#423b0b}.modal .sign-up .sign-block .sign-form a:hover{filter:contrast(85%);opacity:.75}.modal .sign-up .sign-block .sign-form .form:last-child{margin-bottom:0}.vis{visibility:visible;opacity:1}
/*# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL25vZGVfbW9kdWxlcy9ub3JtYWxpemUuY3NzL25vcm1hbGl6ZS5jc3MiLCJtYWluLmNzcyIsIm1haW4uc2FzcyIsImNvbW1vbi9jb250ZW50LnNhc3MiLCJjb21tb24vc2lnbi5zYXNzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLDRFQVVBLEtBQ0UsWUFBQSxLQUNBLHlCQUFBLEtBVUYsS0FDRSxPQUFBLEVBT0YsS0FDRSxRQUFBLE1BUUYsR0FDRSxVQUFBLElBQ0EsT0FBQSxNQUFBLEVBV0YsR0FDRSxXQUFBLFlBQ0EsT0FBQSxFQUNBLFNBQUEsUUFRRixJQUNFLFlBQUEsU0FBQSxDQUFBLFVBQ0EsVUFBQSxJQVVGLEVBQ0UsaUJBQUEsWUFRRixZQUNFLGNBQUEsS0FDQSxnQkFBQSxVQUNBLHdCQUFBLFVBQUEsT0FBQSxnQkFBQSxVQUFBLE9BT0YsRUNWQSxPRFlFLFlBQUEsT0FRRixLQ1pBLElBQ0EsS0RjRSxZQUFBLFNBQUEsQ0FBQSxVQUNBLFVBQUEsSUFPRixNQUNFLFVBQUEsSUFRRixJQ2RBLElEZ0JFLFVBQUEsSUFDQSxZQUFBLEVBQ0EsU0FBQSxTQUNBLGVBQUEsU0FHRixJQUNFLE9BQUEsT0FHRixJQUNFLElBQUEsTUFVRixJQUNFLGFBQUEsS0FXRixPQ3RCQSxNQUNBLFNBQ0EsT0FDQSxTRHdCRSxZQUFBLFFBQ0EsVUFBQSxLQUNBLFlBQUEsS0FDQSxPQUFBLEVBUUYsT0NwQkEsTURzQkUsU0FBQSxRQVFGLE9DckJBLE9EdUJFLGVBQUEsS0NmRixjQUNBLGFBQ0EsY0RvQkEsT0FJRSxtQkFBQSxPQ2pCRixnQ0FDQSwrQkFDQSxnQ0RzQkEseUJBSUUsYUFBQSxLQUNBLFFBQUEsRUNuQkYsNkJBQ0EsNEJBQ0EsNkJEd0JBLHNCQUlFLFFBQUEsSUFBQSxPQUFBLFdBT0YsU0FDRSxRQUFBLE1BQUEsTUFBQSxPQVVGLE9BQ0UsV0FBQSxXQUNBLE1BQUEsUUFDQSxRQUFBLE1BQ0EsVUFBQSxLQUNBLFFBQUEsRUFDQSxZQUFBLE9B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TUFDQSxNQUFBLElBQ0EsT0FBQSxFQUFBLEtBQ0EsV0FBQSxlQUNBLFFBQUEsR0FuRnBCLDRDQXFGd0IsUUFBQSxJQUNBLFdBQUEsT0FDQSxNQUFBLFFBdkZ4QiwrQ0F5Rm9CLE9BQUEsY0FDQSxRQUFBLElBMUZwQix3REE0Rm9CLGNBQUEsRUFFcEIsS0FDSSxXQUFBLFFBQ0EsUUFBQSIsImZpbGUiOiJtYWluLmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi8qISBub3JtYWxpemUuY3NzIHY4LjAuMSB8IE1JVCBMaWNlbnNlIHwgZ2l0aHViLmNvbS9uZWNvbGFzL25vcm1hbGl6ZS5jc3MgKi9cblxuLyogRG9jdW1lbnRcbiAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG5cbi8qKlxuICogMS4gQ29ycmVjdCB0aGUgbGluZSBoZWlnaHQgaW4gYWxsIGJyb3dzZXJzLlxuICogMi4gUHJldmVudCBhZGp1c3RtZW50cyBvZiBmb250IHNpemUgYWZ0ZXIgb3JpZW50YXRpb24gY2hhbmdlcyBpbiBpT1MuXG4gKi9cblxuaHRtbCB7XG4gIGxpbmUtaGVpZ2h0OiAxLjE1OyAvKiAxICovXG4gIC13ZWJraXQtdGV4dC1zaXplLWFkanVzdDogMTAwJTsgLyogMiAqL1xufVxuXG4vKiBTZWN0aW9uc1xuICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuLyoqXG4gKiBSZW1vdmUgdGhlIG1hcmdpbiBpbiBhbGwgYnJvd3NlcnMuXG4gKi9cblxuYm9keSB7XG4gIG1hcmdpbjogMDtcbn1cblxuLyoqXG4gKiBSZW5kZXIgdGhlIGBtYWluYCBlbGVtZW50IGNvbnNpc3RlbnRseSBpbiBJRS5cbiAqL1xuXG5tYWluIHtcbiAgZGlzcGxheTogYmxvY2s7XG59XG5cbi8qKlxuICogQ29ycmVjdCB0aGUgZm9udCBzaXplIGFuZCBtYXJnaW4gb24gYGgxYCBlbGVtZW50cyB3aXRoaW4gYHNlY3Rpb25gIGFuZFxuICogYGFydGljbGVgIGNvbnRleHRzIGluIENocm9tZSwgRmlyZWZveCwgYW5kIFNhZmFyaS5cbiAqL1xuXG5oMSB7XG4gIGZvbnQtc2l6ZTogMmVtO1xuICBtYXJnaW46IDAuNjdlbSAwO1xufVxuXG4vKiBHcm91cGluZyBjb250ZW50XG4gICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuXG4vKipcbiAqIDEuIEFkZCB0aGUgY29ycmVjdCBib3ggc2l6aW5nIGluIEZpcmVmb3guXG4gKiAyLiBTaG93IHRoZSBvdmVyZmxvdyBpbiBFZGdlIGFuZCBJRS5cbiAqL1xuXG5ociB7XG4gIGJveC1zaXppbmc6IGNvbnRlbnQtYm94OyAvKiAxICovXG4gIGhlaWdodDogMDsgLyogMSAqL1xuICBvdmVyZmxvdzogdmlzaWJsZTsgLyogMiAqL1xufVxuXG4vKipcbiAqIDEuIENvcnJlY3QgdGhlIGluaGVyaXRhbmNlIGFuZCBzY2FsaW5nIG9mIGZvbnQgc2l6ZSBpbiBhbGwgYnJvd3NlcnMuXG4gKiAyLiBDb3JyZWN0IHRoZSBvZGQgYGVtYCBmb250IHNpemluZyBpbiBhbGwgYnJvd3NlcnMuXG4gKi9cblxucHJlIHtcbiAgZm9udC1mYW1pbHk6IG1vbm9zcGFjZSwgbW9ub3NwYWNlOyAvKiAxICovXG4gIGZvbnQtc2l6ZTogMWVtOyAvKiAyICovXG59XG5cbi8qIFRleHQtbGV2ZWwgc2VtYW50aWNzXG4gICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuXG4vKipcbiAqIFJlbW92ZSB0aGUgZ3JheSBiYWNrZ3JvdW5kIG9uIGFjdGl2ZSBsaW5rcyBpbiBJRSAxMC5cbiAqL1xuXG5hIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XG59XG5cbi8qKlxuICogMS4gUmVtb3ZlIHRoZSBib3R0b20gYm9yZGVyIGluIENocm9tZSA1Ny1cbiAqIDIuIEFkZCB0aGUgY29ycmVjdCB0ZXh0IGRlY29yYXRpb24gaW4gQ2hyb21lLCBFZGdlLCBJRSwgT3BlcmEsIGFuZCBTYWZhcmkuXG4gKi9cblxuYWJiclt0aXRsZV0ge1xuICBib3JkZXItYm90dG9tOiBub25lOyAvKiAxICovXG4gIHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lOyAvKiAyICovXG4gIHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lIGRvdHRlZDsgLyogMiAqL1xufVxuXG4vKipcbiAqIEFkZCB0aGUgY29ycmVjdCBmb250IHdlaWdodCBpbiBDaHJvbWUsIEVkZ2UsIGFuZCBTYWZhcmkuXG4gKi9cblxuYixcbnN0cm9uZyB7XG4gIGZvbnQtd2VpZ2h0OiBib2xkZXI7XG59XG5cbi8qKlxuICogMS4gQ29ycmVjdCB0aGUgaW5oZXJpdGFuY2UgYW5kIHNjYWxpbmcgb2YgZm9udCBzaXplIGluIGFsbCBicm93c2Vycy5cbiAqIDIuIENvcnJlY3QgdGhlIG9kZCBgZW1gIGZvbnQgc2l6aW5nIGluIGFsbCBicm93c2Vycy5cbiAqL1xuXG5jb2RlLFxua2JkLFxuc2FtcCB7XG4gIGZvbnQtZmFtaWx5OiBtb25vc3BhY2UsIG1vbm9zcGFjZTsgLyogMSAqL1xuICBmb250LXNpemU6IDFlbTsgLyogMiAqL1xufVxuXG4vKipcbiAqIEFkZCB0aGUgY29ycmVjdCBmb250IHNpemUgaW4gYWxsIGJyb3dzZXJzLlxuICovXG5cbnNtYWxsIHtcbiAgZm9udC1zaXplOiA4MCU7XG59XG5cbi8qKlxuICogUHJldmVudCBgc3ViYCBhbmQgYHN1cGAgZWxlbWVudHMgZnJvbSBhZmZlY3RpbmcgdGhlIGxpbmUgaGVpZ2h0IGluXG4gKiBhbGwgYnJvd3NlcnMuXG4gKi9cblxuc3ViLFxuc3VwIHtcbiAgZm9udC1zaXplOiA3NSU7XG4gIGxpbmUtaGVpZ2h0OiAwO1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIHZlcnRpY2FsLWFsaWduOiBiYXNlbGluZTtcbn1cblxuc3ViIHtcbiAgYm90dG9tOiAtMC4yNWVtO1xufVxuXG5zdXAge1xuICB0b3A6IC0wLjVlbTtcbn1cblxuLyogRW1iZWRkZWQgY29udGVudFxuICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuLyoqXG4gKiBSZW1vdmUgdGhlIGJvcmRlciBvbiBpbWFnZXMgaW5zaWRlIGxpbmtzIGluIElFIDEwLlxuICovXG5cbmltZyB7XG4gIGJvcmRlci1zdHlsZTogbm9uZTtcbn1cblxuLyogRm9ybXNcbiAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG5cbi8qKlxuICogMS4gQ2hhbmdlIHRoZSBmb250IHN0eWxlcyBpbiBhbGwgYnJvd3NlcnMuXG4gKiAyLiBSZW1vdmUgdGhlIG1hcmdpbiBpbiBGaXJlZm94IGFuZCBTYWZhcmkuXG4gKi9cblxuYnV0dG9uLFxuaW5wdXQsXG5vcHRncm91cCxcbnNlbGVjdCxcbnRleHRhcmVhIHtcbiAgZm9udC1mYW1pbHk6IGluaGVyaXQ7IC8qIDEgKi9cbiAgZm9udC1zaXplOiAxMDAlOyAvKiAxICovXG4gIGxpbmUtaGVpZ2h0OiAxLjE1OyAvKiAxICovXG4gIG1hcmdpbjogMDsgLyogMiAqL1xufVxuXG4vKipcbiAqIFNob3cgdGhlIG92ZXJmbG93IGluIElFLlxuICogMS4gU2hvdyB0aGUgb3ZlcmZsb3cgaW4gRWRnZS5cbiAqL1xuXG5idXR0b24sXG5pbnB1dCB7IC8qIDEgKi9cbiAgb3ZlcmZsb3c6IHZpc2libGU7XG59XG5cbi8qKlxuICogUmVtb3ZlIHRoZSBpbmhlcml0YW5jZSBvZiB0ZXh0IHRyYW5zZm9ybSBpbiBFZGdlLCBGaXJlZm94LCBhbmQgSUUuXG4gKiAxLiBSZW1vdmUgdGhlIGluaGVyaXRhbmNlIG9mIHRleHQgdHJhbnNmb3JtIGluIEZpcmVmb3guXG4gKi9cblxuYnV0dG9uLFxuc2VsZWN0IHsgLyogMSAqL1xuICB0ZXh0LXRyYW5zZm9ybTogbm9uZTtcbn1cblxuLyoqXG4gKiBDb3JyZWN0IHRoZSBpbmFiaWxpdHkgdG8gc3R5bGUgY2xpY2thYmxlIHR5cGVzIGluIGlPUyBhbmQgU2FmYXJpLlxuICovXG5cbmJ1dHRvbixcblt0eXBlPVwiYnV0dG9uXCJdLFxuW3R5cGU9XCJyZXNldFwiXSxcblt0eXBlPVwic3VibWl0XCJdIHtcbiAgLXdlYmtpdC1hcHBlYXJhbmNlOiBidXR0b247XG59XG5cbi8qKlxuICogUmVtb3ZlIHRoZSBpbm5lciBib3JkZXIgYW5kIHBhZGRpbmcgaW4gRmlyZWZveC5cbiAqL1xuXG5idXR0b246Oi1tb3otZm9jdXMtaW5uZXIsXG5bdHlwZT1cImJ1dHRvblwiXTo6LW1vei1mb2N1cy1pbm5lcixcblt0eXBlPVwicmVzZXRcIl06Oi1tb3otZm9jdXMtaW5uZXIsXG5bdHlwZT1cInN1Ym1pdFwiXTo6LW1vei1mb2N1cy1pbm5lciB7XG4gIGJvcmRlci1zdHlsZTogbm9uZTtcbiAgcGFkZGluZzogMDtcbn1cblxuLyoqXG4gKiBSZXN0b3JlIHRoZSBmb2N1cyBzdHlsZXMgdW5zZXQgYnkgdGhlIHByZXZpb3VzIHJ1bGUuXG4gKi9cblxuYnV0dG9uOi1tb3otZm9jdXNyaW5nLFxuW3R5cGU9XCJidXR0b25cIl06LW1vei1mb2N1c3JpbmcsXG5bdHlwZT1cInJlc2V0XCJdOi1tb3otZm9jdXNyaW5nLFxuW3R5cGU9XCJzdWJtaXRcIl06LW1vei1mb2N1c3Jpbmcge1xuICBvdXRsaW5lOiAxcHggZG90dGVkIEJ1dHRvblRleHQ7XG59XG5cbi8qKlxuICogQ29ycmVjdCB0aGUgcGFkZGluZyBpbiBGaXJlZm94LlxuICovXG5cbmZpZWxkc2V0IHtcbiAgcGFkZGluZzogMC4zNWVtIDAuNzVlbSAwLjYyNWVtO1xufVxuXG4vKipcbiAqIDEuIENvcnJlY3QgdGhlIHRleHQgd3JhcHBpbmcgaW4gRWRnZSBhbmQgSUUuXG4gKiAyLiBDb3JyZWN0IHRoZSBjb2xvciBpbmhlcml0YW5jZSBmcm9tIGBmaWVsZHNldGAgZWxlbWVudHMgaW4gSUUuXG4gKiAzLiBSZW1vdmUgdGhlIHBhZGRpbmcgc28gZGV2ZWxvcGVycyBhcmUgbm90IGNhdWdodCBvdXQgd2hlbiB0aGV5IHplcm8gb3V0XG4gKiAgICBgZmllbGRzZXRgIGVsZW1lbnRzIGluIGFsbCBicm93c2Vycy5cbiAqL1xuXG5sZWdlbmQge1xuICBib3gtc2l6aW5nOiBib3JkZXItYm94OyAvKiAxICovXG4gIGNvbG9yOiBpbmhlcml0OyAvKiAyICovXG4gIGRpc3BsYXk6IHRhYmxlOyAvKiAxICovXG4gIG1heC13aWR0aDogMTAwJTsgLyogMSAqL1xuICBwYWRkaW5nOiAwOyAvKiAzICovXG4gIHdoaXRlLXNwYWNlOiBub3JtYWw7IC8qIDEgKi9cbn1cblxuLyoqXG4gKiBBZGQgdGhlIGNvcnJlY3QgdmVydGljYWwgYWxpZ25tZW50IGluIENocm9tZSwgRmlyZWZveCwgYW5kIE9wZXJhLlxuICovXG5cbnByb2dyZXNzIHtcbiAgdmVydGljYWwtYWxpZ246IGJhc2VsaW5lO1xufVxuXG4vKipcbiAqIFJlbW92ZSB0aGUgZGVmYXVsdCB2ZXJ0aWNhbCBzY3JvbGxiYXIgaW4gSUUgMTArLlxuICovXG5cbnRleHRhcmVhIHtcbiAgb3ZlcmZsb3c6IGF1dG87XG59XG5cbi8qKlxuICogMS4gQWRkIHRoZSBjb3JyZWN0IGJveCBzaXppbmcgaW4gSUUgMTAuXG4gKiAyLiBSZW1vdmUgdGhlIHBhZGRpbmcgaW4gSUUgMTAuXG4gKi9cblxuW3R5cGU9XCJjaGVja2JveFwiXSxcblt0eXBlPVwicmFkaW9cIl0ge1xuICBib3gtc2l6aW5nOiBib3JkZXItYm94OyAvKiAxICovXG4gIHBhZGRpbmc6IDA7IC8qIDIgKi9cbn1cblxuLyoqXG4gKiBDb3JyZWN0IHRoZSBjdXJzb3Igc3R5bGUgb2YgaW5jcmVtZW50IGFuZCBkZWNyZW1lbnQgYnV0dG9ucyBpbiBDaHJvbWUuXG4gKi9cblxuW3R5cGU9XCJudW1iZXJcIl06Oi13ZWJraXQtaW5uZXItc3Bpbi1idXR0b24sXG5bdHlwZT1cIm51bWJlclwiXTo6LXdlYmtpdC1vdXRlci1zcGluLWJ1dHRvbiB7XG4gIGhlaWdodDogYXV0bztcbn1cblxuLyoqXG4gKiAxLiBDb3JyZWN0IHRoZSBvZGQgYXBwZWFyYW5jZSBpbiBDaHJvbWUgYW5kIFNhZmFyaS5cbiAqIDIuIENvcnJlY3QgdGhlIG91dGxpbmUgc3R5bGUgaW4gU2FmYXJpLlxuICovXG5cblt0eXBlPVwic2VhcmNoXCJdIHtcbiAgLXdlYmtpdC1hcHBlYXJhbmNlOiB0ZXh0ZmllbGQ7IC8qIDEgKi9cbiAgb3V0bGluZS1vZmZzZXQ6IC0ycHg7IC8qIDIgKi9cbn1cblxuLyoqXG4gKiBSZW1vdmUgdGhlIGlubmVyIHBhZGRpbmcgaW4gQ2hyb21lIGFuZCBTYWZhcmkgb24gbWFjT1MuXG4gKi9cblxuW3R5cGU9XCJzZWFyY2hcIl06Oi13ZWJraXQtc2VhcmNoLWRlY29yYXRpb24ge1xuICAtd2Via2l0LWFwcGVhcmFuY2U6IG5vbmU7XG59XG5cbi8qKlxuICogMS4gQ29ycmVjdCB0aGUgaW5hYmlsaXR5IHRvIHN0eWxlIGNsaWNrYWJsZSB0eXBlcyBpbiBpT1MgYW5kIFNhZmFyaS5cbiAqIDIuIENoYW5nZSBmb250IHByb3BlcnRpZXMgdG8gYGluaGVyaXRgIGluIFNhZmFyaS5cbiAqL1xuXG46Oi13ZWJraXQtZmlsZS11cGxvYWQtYnV0dG9uIHtcbiAgLXdlYmtpdC1hcHBlYXJhbmNlOiBidXR0b247IC8qIDEgKi9cbiAgZm9udDogaW5oZXJpdDsgLyogMiAqL1xufVxuXG4vKiBJbnRlcmFjdGl2ZVxuICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuLypcbiAqIEFkZCB0aGUgY29ycmVjdCBkaXNwbGF5IGluIEVkZ2UsIElFIDEwKywgYW5kIEZpcmVmb3guXG4gKi9cblxuZGV0YWlscyB7XG4gIGRpc3BsYXk6IGJsb2NrO1xufVxuXG4vKlxuICogQWRkIHRoZSBjb3JyZWN0IGRpc3BsYXkgaW4gYWxsIGJyb3dzZXJzLlxuICovXG5cbnN1bW1hcnkge1xuICBkaXNwbGF5OiBsaXN0LWl0ZW07XG59XG5cbi8qIE1pc2NcbiAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG5cbi8qKlxuICogQWRkIHRoZSBjb3JyZWN0IGRpc3BsYXkgaW4gSUUgMTArLlxuICovXG5cbnRlbXBsYXRlIHtcbiAgZGlzcGxheTogbm9uZTtcbn1cblxuLyoqXG4gKiBBZGQgdGhlIGNvcnJlY3QgZGlzcGxheSBpbiBJRSAxMC5cbiAqL1xuXG5baGlkZGVuXSB7XG4gIGRpc3BsYXk6IG5vbmU7XG59XG4iLCIvKiEgbm9ybWFsaXplLmNzcyB2OC4wLjEgfCBNSVQgTGljZW5zZSB8IGdpdGh1Yi5jb20vbmVjb2xhcy9ub3JtYWxpemUuY3NzICovXG4vKiBEb2N1bWVudFxuICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cbi8qKlxuICogMS4gQ29ycmVjdCB0aGUgbGluZSBoZWlnaHQgaW4gYWxsIGJyb3dzZXJzLlxuICogMi4gUHJldmVudCBhZGp1c3RtZW50cyBvZiBmb250IHNpemUgYWZ0ZXIgb3JpZW50YXRpb24gY2hhbmdlcyBpbiBpT1MuXG4gKi9cbmh0bWwge1xuICBsaW5lLWhlaWdodDogMS4xNTtcbiAgLyogMSAqL1xuICAtd2Via2l0LXRleHQtc2l6ZS1hZGp1c3Q6IDEwMCU7XG4gIC8qIDIgKi8gfVxuXG4vKiBTZWN0aW9uc1xuICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cbi8qKlxuICogUmVtb3ZlIHRoZSBtYXJnaW4gaW4gYWxsIGJyb3dzZXJzLlxuICovXG5ib2R5IHtcbiAgbWFyZ2luOiAwOyB9XG5cbi8qKlxuICogUmVuZGVyIHRoZSBgbWFpbmAgZWxlbWVudCBjb25zaXN0ZW50bHkgaW4gSUUuXG4gKi9cbm1haW4ge1xuICBkaXNwbGF5OiBibG9jazsgfVxuXG4vKipcbiAqIENvcnJlY3QgdGhlIGZvbnQgc2l6ZSBhbmQgbWFyZ2luIG9uIGBoMWAgZWxlbWVudHMgd2l0aGluIGBzZWN0aW9uYCBhbmRcbiAqIGBhcnRpY2xlYCBjb250ZXh0cyBpbiBDaHJvbWUsIEZpcmVmb3gsIGFuZCBTYWZhcmkuXG4gKi9cbmgxIHtcbiAgZm9udC1zaXplOiAyZW07XG4gIG1hcmdpbjogMC42N2VtIDA7IH1cblxuLyogR3JvdXBpbmcgY29udGVudFxuICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cbi8qKlxuICogMS4gQWRkIHRoZSBjb3JyZWN0IGJveCBzaXppbmcgaW4gRmlyZWZveC5cbiAqIDIuIFNob3cgdGhlIG92ZXJmbG93IGluIEVkZ2UgYW5kIElFLlxuICovXG5ociB7XG4gIGJveC1zaXppbmc6IGNvbnRlbnQtYm94O1xuICAvKiAxICovXG4gIGhlaWdodDogMDtcbiAgLyogMSAqL1xuICBvdmVyZmxvdzogdmlzaWJsZTtcbiAgLyogMiAqLyB9XG5cbi8qKlxuICogMS4gQ29ycmVjdCB0aGUgaW5oZXJpdGFuY2UgYW5kIHNjYWxpbmcgb2YgZm9udCBzaXplIGluIGFsbCBicm93c2Vycy5cbiAqIDIuIENvcnJlY3QgdGhlIG9kZCBgZW1gIGZvbnQgc2l6aW5nIGluIGFsbCBicm93c2Vycy5cbiAqL1xucHJlIHtcbiAgZm9udC1mYW1pbHk6IG1vbm9zcGFjZSwgbW9ub3NwYWNlO1xuICAvKiAxICovXG4gIGZvbnQtc2l6ZTogMWVtO1xuICAvKiAyICovIH1cblxuLyogVGV4dC1sZXZlbCBzZW1hbnRpY3NcbiAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG4vKipcbiAqIFJlbW92ZSB0aGUgZ3JheSBiYWNrZ3JvdW5kIG9uIGFjdGl2ZSBsaW5rcyBpbiBJRSAxMC5cbiAqL1xuYSB7XG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50OyB9XG5cbi8qKlxuICogMS4gUmVtb3ZlIHRoZSBib3R0b20gYm9yZGVyIGluIENocm9tZSA1Ny1cbiAqIDIuIEFkZCB0aGUgY29ycmVjdCB0ZXh0IGRlY29yYXRpb24gaW4gQ2hyb21lLCBFZGdlLCBJRSwgT3BlcmEsIGFuZCBTYWZhcmkuXG4gKi9cbmFiYnJbdGl0bGVdIHtcbiAgYm9yZGVyLWJvdHRvbTogbm9uZTtcbiAgLyogMSAqL1xuICB0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZTtcbiAgLyogMiAqL1xuICB0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZSBkb3R0ZWQ7XG4gIC8qIDIgKi8gfVxuXG4vKipcbiAqIEFkZCB0aGUgY29ycmVjdCBmb250IHdlaWdodCBpbiBDaHJvbWUsIEVkZ2UsIGFuZCBTYWZhcmkuXG4gKi9cbmIsXG5zdHJvbmcge1xuICBmb250LXdlaWdodDogYm9sZGVyOyB9XG5cbi8qKlxuICogMS4gQ29ycmVjdCB0aGUgaW5oZXJpdGFuY2UgYW5kIHNjYWxpbmcgb2YgZm9udCBzaXplIGluIGFsbCBicm93c2Vycy5cbiAqIDIuIENvcnJlY3QgdGhlIG9kZCBgZW1gIGZvbnQgc2l6aW5nIGluIGFsbCBicm93c2Vycy5cbiAqL1xuY29kZSxcbmtiZCxcbnNhbXAge1xuICBmb250LWZhbWlseTogbW9ub3NwYWNlLCBtb25vc3BhY2U7XG4gIC8qIDEgKi9cbiAgZm9udC1zaXplOiAxZW07XG4gIC8qIDIgKi8gfVxuXG4vKipcbiAqIEFkZCB0aGUgY29ycmVjdCBmb250IHNpemUgaW4gYWxsIGJyb3dzZXJzLlxuICovXG5zbWFsbCB7XG4gIGZvbnQtc2l6ZTogODAlOyB9XG5cbi8qKlxuICogUHJldmVudCBgc3ViYCBhbmQgYHN1cGAgZWxlbWVudHMgZnJvbSBhZmZlY3RpbmcgdGhlIGxpbmUgaGVpZ2h0IGluXG4gKiBhbGwgYnJvd3NlcnMuXG4gKi9cbnN1YixcbnN1cCB7XG4gIGZvbnQtc2l6ZTogNzUlO1xuICBsaW5lLWhlaWdodDogMDtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICB2ZXJ0aWNhbC1hbGlnbjogYmFzZWxpbmU7IH1cblxuc3ViIHtcbiAgYm90dG9tOiAtMC4yNWVtOyB9XG5cbnN1cCB7XG4gIHRvcDogLTAuNWVtOyB9XG5cbi8qIEVtYmVkZGVkIGNvbnRlbnRcbiAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG4vKipcbiAqIFJlbW92ZSB0aGUgYm9yZGVyIG9uIGltYWdlcyBpbnNpZGUgbGlua3MgaW4gSUUgMTAuXG4gKi9cbmltZyB7XG4gIGJvcmRlci1zdHlsZTogbm9uZTsgfVxuXG4vKiBGb3Jtc1xuICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cbi8qKlxuICogMS4gQ2hhbmdlIHRoZSBmb250IHN0eWxlcyBpbiBhbGwgYnJvd3NlcnMuXG4gKiAyLiBSZW1vdmUgdGhlIG1hcmdpbiBpbiBGaXJlZm94IGFuZCBTYWZhcmkuXG4gKi9cbmJ1dHRvbixcbmlucHV0LFxub3B0Z3JvdXAsXG5zZWxlY3QsXG50ZXh0YXJlYSB7XG4gIGZvbnQtZmFtaWx5OiBpbmhlcml0O1xuICAvKiAxICovXG4gIGZvbnQtc2l6ZTogMTAwJTtcbiAgLyogMSAqL1xuICBsaW5lLWhlaWdodDogMS4xNTtcbiAgLyogMSAqL1xuICBtYXJnaW46IDA7XG4gIC8qIDIgKi8gfVxuXG4vKipcbiAqIFNob3cgdGhlIG92ZXJmbG93IGluIElFLlxuICogMS4gU2hvdyB0aGUgb3ZlcmZsb3cgaW4gRWRnZS5cbiAqL1xuYnV0dG9uLFxuaW5wdXQge1xuICAvKiAxICovXG4gIG92ZXJmbG93OiB2aXNpYmxlOyB9XG5cbi8qKlxuICogUmVtb3ZlIHRoZSBpbmhlcml0YW5jZSBvZiB0ZXh0IHRyYW5zZm9ybSBpbiBFZGdlLCBGaXJlZm94LCBhbmQgSUUuXG4gKiAxLiBSZW1vdmUgdGhlIGluaGVyaXRhbmNlIG9mIHRleHQgdHJhbnNmb3JtIGluIEZpcmVmb3guXG4gKi9cbmJ1dHRvbixcbnNlbGVjdCB7XG4gIC8qIDEgKi9cbiAgdGV4dC10cmFuc2Zvcm06IG5vbmU7IH1cblxuLyoqXG4gKiBDb3JyZWN0IHRoZSBpbmFiaWxpdHkgdG8gc3R5bGUgY2xpY2thYmxlIHR5cGVzIGluIGlPUyBhbmQgU2FmYXJpLlxuICovXG5idXR0b24sXG5bdHlwZT1cImJ1dHRvblwiXSxcblt0eXBlPVwicmVzZXRcIl0sXG5bdHlwZT1cInN1Ym1pdFwiXSB7XG4gIC13ZWJraXQtYXBwZWFyYW5jZTogYnV0dG9uOyB9XG5cbi8qKlxuICogUmVtb3ZlIHRoZSBpbm5lciBib3JkZXIgYW5kIHBhZGRpbmcgaW4gRmlyZWZveC5cbiAqL1xuYnV0dG9uOjotbW96LWZvY3VzLWlubmVyLFxuW3R5cGU9XCJidXR0b25cIl06Oi1tb3otZm9jdXMtaW5uZXIsXG5bdHlwZT1cInJlc2V0XCJdOjotbW96LWZvY3VzLWlubmVyLFxuW3R5cGU9XCJzdWJtaXRcIl06Oi1tb3otZm9jdXMtaW5uZXIge1xuICBib3JkZXItc3R5bGU6IG5vbmU7XG4gIHBhZGRpbmc6IDA7IH1cblxuLyoqXG4gKiBSZXN0b3JlIHRoZSBmb2N1cyBzdHlsZXMgdW5zZXQgYnkgdGhlIHByZXZpb3VzIHJ1bGUuXG4gKi9cbmJ1dHRvbjotbW96LWZvY3VzcmluZyxcblt0eXBlPVwiYnV0dG9uXCJdOi1tb3otZm9jdXNyaW5nLFxuW3R5cGU9XCJyZXNldFwiXTotbW96LWZvY3VzcmluZyxcblt0eXBlPVwic3VibWl0XCJdOi1tb3otZm9jdXNyaW5nIHtcbiAgb3V0bGluZTogMXB4IGRvdHRlZCBCdXR0b25UZXh0OyB9XG5cbi8qKlxuICogQ29ycmVjdCB0aGUgcGFkZGluZyBpbiBGaXJlZm94LlxuICovXG5maWVsZHNldCB7XG4gIHBhZGRpbmc6IDAuMzVlbSAwLjc1ZW0gMC42MjVlbTsgfVxuXG4vKipcbiAqIDEuIENvcnJlY3QgdGhlIHRleHQgd3JhcHBpbmcgaW4gRWRnZSBhbmQgSUUuXG4gKiAyLiBDb3JyZWN0IHRoZSBjb2xvciBpbmhlcml0YW5jZSBmcm9tIGBmaWVsZHNldGAgZWxlbWVudHMgaW4gSUUuXG4gKiAzLiBSZW1vdmUgdGhlIHBhZGRpbmcgc28gZGV2ZWxvcGVycyBhcmUgbm90IGNhdWdodCBvdXQgd2hlbiB0aGV5IHplcm8gb3V0XG4gKiAgICBgZmllbGRzZXRgIGVsZW1lbnRzIGluIGFsbCBicm93c2Vycy5cbiAqL1xubGVnZW5kIHtcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgLyogMSAqL1xuICBjb2xvcjogaW5oZXJpdDtcbiAgLyogMiAqL1xuICBkaXNwbGF5OiB0YWJsZTtcbiAgLyogMSAqL1xuICBtYXgtd2lkdGg6IDEwMCU7XG4gIC8qIDEgKi9cbiAgcGFkZGluZzogMDtcbiAgLyogMyAqL1xuICB3aGl0ZS1zcGFjZTogbm9ybWFsO1xuICAvKiAxICovIH1cblxuLyoqXG4gKiBBZGQgdGhlIGNvcnJlY3QgdmVydGljYWwgYWxpZ25tZW50IGluIENocm9tZSwgRmlyZWZveCwgYW5kIE9wZXJhLlxuICovXG5wcm9ncmVzcyB7XG4gIHZlcnRpY2FsLWFsaWduOiBiYXNlbGluZTsgfVxuXG4vKipcbiAqIFJlbW92ZSB0aGUgZGVmYXVsdCB2ZXJ0aWNhbCBzY3JvbGxiYXIgaW4gSUUgMTArLlxuICovXG50ZXh0YXJlYSB7XG4gIG92ZXJmbG93OiBhdXRvOyB9XG5cbi8qKlxuICogMS4gQWRkIHRoZSBjb3JyZWN0IGJveCBzaXppbmcgaW4gSUUgMTAuXG4gKiAyLiBSZW1vdmUgdGhlIHBhZGRpbmcgaW4gSUUgMTAuXG4gKi9cblt0eXBlPVwiY2hlY2tib3hcIl0sXG5bdHlwZT1cInJhZGlvXCJdIHtcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgLyogMSAqL1xuICBwYWRkaW5nOiAwO1xuICAvKiAyICovIH1cblxuLyoqXG4gKiBDb3JyZWN0IHRoZSBjdXJzb3Igc3R5bGUgb2YgaW5jcmVtZW50IGFuZCBkZWNyZW1lbnQgYnV0dG9ucyBpbiBDaHJvbWUuXG4gKi9cblt0eXBlPVwibnVtYmVyXCJdOjotd2Via2l0LWlubmVyLXNwaW4tYnV0dG9uLFxuW3R5cGU9XCJudW1iZXJcIl06Oi13ZWJraXQtb3V0ZXItc3Bpbi1idXR0b24ge1xuICBoZWlnaHQ6IGF1dG87IH1cblxuLyoqXG4gKiAxLiBDb3JyZWN0IHRoZSBvZGQgYXBwZWFyYW5jZSBpbiBDaHJvbWUgYW5kIFNhZmFyaS5cbiAqIDIuIENvcnJlY3QgdGhlIG91dGxpbmUgc3R5bGUgaW4gU2FmYXJpLlxuICovXG5bdHlwZT1cInNlYXJjaFwiXSB7XG4gIC13ZWJraXQtYXBwZWFyYW5jZTogdGV4dGZpZWxkO1xuICAvKiAxICovXG4gIG91dGxpbmUtb2Zmc2V0OiAtMnB4O1xuICAvKiAyICovIH1cblxuLyoqXG4gKiBSZW1vdmUgdGhlIGlubmVyIHBhZGRpbmcgaW4gQ2hyb21lIGFuZCBTYWZhcmkgb24gbWFjT1MuXG4gKi9cblt0eXBlPVwic2VhcmNoXCJdOjotd2Via2l0LXNlYXJjaC1kZWNvcmF0aW9uIHtcbiAgLXdlYmtpdC1hcHBlYXJhbmNlOiBub25lOyB9XG5cbi8qKlxuICogMS4gQ29ycmVjdCB0aGUgaW5hYmlsaXR5IHRvIHN0eWxlIGNsaWNrYWJsZSB0eXBlcyBpbiBpT1MgYW5kIFNhZmFyaS5cbiAqIDIuIENoYW5nZSBmb250IHByb3BlcnRpZXMgdG8gYGluaGVyaXRgIGluIFNhZmFyaS5cbiAqL1xuOjotd2Via2l0LWZpbGUtdXBsb2FkLWJ1dHRvbiB7XG4gIC13ZWJraXQtYXBwZWFyYW5jZTogYnV0dG9uO1xuICAvKiAxICovXG4gIGZvbnQ6IGluaGVyaXQ7XG4gIC8qIDIgKi8gfVxuXG4vKiBJbnRlcmFjdGl2ZVxuICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cbi8qXG4gKiBBZGQgdGhlIGNvcnJlY3QgZGlzcGxheSBpbiBFZGdlLCBJRSAxMCssIGFuZCBGaXJlZm94LlxuICovXG5kZXRhaWxzIHtcbiAgZGlzcGxheTogYmxvY2s7IH1cblxuLypcbiAqIEFkZCB0aGUgY29ycmVjdCBkaXNwbGF5IGluIGFsbCBicm93c2Vycy5cbiAqL1xuc3VtbWFyeSB7XG4gIGRpc3BsYXk6IGxpc3QtaXRlbTsgfVxuXG4vKiBNaXNjXG4gICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuLyoqXG4gKiBBZGQgdGhlIGNvcnJlY3QgZGlzcGxheSBpbiBJRSAxMCsuXG4gKi9cbnRlbXBsYXRlIHtcbiAgZGlzcGxheTogbm9uZTsgfVxuXG4vKipcbiAqIEFkZCB0aGUgY29ycmVjdCBkaXNwbGF5IGluIElFIDEwLlxuICovXG5baGlkZGVuXSB7XG4gIGRpc3BsYXk6IG5vbmU7IH1cblxuYm9keSB7XG4gIGJhY2tncm91bmQtY29sb3I6ICNmN2Y1ZWY7IH1cbiAgYm9keSBwLCBib2R5IGg1LCBib2R5IGgyLCBib2R5IGg0LCBib2R5IGgzIHtcbiAgICBjb2xvcjogIzJjMjgwODtcbiAgICBtYXJnaW46IDA7IH1cbiAgYm9keSBhIHtcbiAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG4gICAgY29sb3I6ICMyYzI4MDg7XG4gICAgY3Vyc29yOiBwb2ludGVyOyB9XG5cbi5oZWFkZXIge1xuICBwYWRkaW5nOiAwIDEwcHg7XG4gIGJhY2tncm91bmQtY29sb3I6ICNCNUZFRDk7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIG1heC1oZWlnaHQ6IDEwdmg7XG4gIHBhZGRpbmc6IDEwcHg7XG4gIGJvcmRlci1yYWRpdXM6IDAgMCAzMHB4IDMwcHg7XG4gIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjOThjYmI0O1xuICBib3gtc2hhZG93OiAtMnB4IDAgMjBweCAycHggIzk4Y2JiNDtcbiAgY29sb3I6ICM0NzQ5MzU7IH1cbiAgLmhlYWRlciAubG9nbyB7XG4gICAgZmxleC1iYXNpczogNTUlO1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHN0YXJ0OyB9XG4gICAgLmhlYWRlciAubG9nbyBoMyB7XG4gICAgICBtYXJnaW46IDA7XG4gICAgICBmb250LXNpemU6IDMwcHg7XG4gICAgICBib3JkZXItcmlnaHQ6IDJweCBzb2xpZCAjNDc0OTM1O1xuICAgICAgcGFkZGluZzogOHB4O1xuICAgICAgcGFkZGluZy1sZWZ0OiAxMnB4O1xuICAgICAgcGFkZGluZy1yaWdodDogMTJweDsgfVxuICAgIC5oZWFkZXIgLmxvZ28gaDM6bGFzdC1jaGlsZCB7XG4gICAgICBib3JkZXItcmlnaHQ6IG5vbmU7IH1cbiAgICAuaGVhZGVyIC5sb2dvIGltZyB7XG4gICAgICB3aWR0aDogNzNweDtcbiAgICAgIGhlaWdodDogNzNweDtcbiAgICAgIG1hcmdpbjogLTEwcHggMDtcbiAgICAgIG1hcmdpbi1yaWdodDogMjBweDtcbiAgICAgIGJvcmRlci1yYWRpdXM6IDIwcHg7XG4gICAgICBib3JkZXI6IDJweCBzb2xpZCAjNDc0OTM1O1xuICAgICAgbWFyZ2luLWxlZnQ6IDglOyB9XG4gIC5oZWFkZXIgLm1lbnUge1xuICAgIGZsZXgtYmFzaXM6IDM3JTtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIG1hcmdpbi1yaWdodDogNSU7XG4gICAgbWFyZ2luLWJvdHRvbTogLTEwcHg7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBmbGV4LWZsb3c6IHJvdy1yZXZlcnNlO1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7IH1cbiAgICAuaGVhZGVyIC5tZW51IGEge1xuICAgICAgbWFyZ2luLWxlZnQ6IDIwcHg7XG4gICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgIHRyYW5zaXRpb246IGFsbCAwLjVzIGVhc2U7XG4gICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAgICAgYm9yZGVyLXRvcDogMCBzb2xpZCAjQjVGRUQ5OyB9XG4gICAgLmhlYWRlciAubWVudSBhOmhvdmVyIHtcbiAgICAgIGJveC1zaGFkb3c6IGluc2V0IDAgLTRweCAwIDAgIzQyM0IwQjsgfVxuICAgIC5oZWFkZXIgLm1lbnUgLm1lbi1idXR0b24ge1xuICAgICAgZm9udC1zaXplOiAyMHB4O1xuICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gICAgICBjb2xvcjogIzQyM0IwQjsgfVxuXG4uY29udGVudCB7XG4gIGhlaWdodDogODZ2aDtcbiAgZGlzcGxheTogZmxleDtcbiAgd2lkdGg6IDk1JTtcbiAgbWFyZ2luOiAwIGF1dG87IH1cbiAgLmNvbnRlbnQgLmxlZnQtc2lkZSB7XG4gICAgZmxleC1iYXNpczogNDAlO1xuICAgIHBhZGRpbmc6IDEwcHg7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBmbGV4LWZsb3c6IGNvbHVtbjsgfVxuICAgIC5jb250ZW50IC5sZWZ0LXNpZGUgLnNoZWR1bGUtbWFpbiB7XG4gICAgICBib3JkZXItcmFkaXVzOiAyMHB4O1xuICAgICAgYmFja2dyb3VuZC1jb2xvcjogIzdiYTA5ODc5O1xuICAgICAgYm94LXNoYWRvdzogMCAwIDEwcHggNXB4IHJnYmEoMjA2LCAxMTAsIDExMCwgMC4yKTtcbiAgICAgIHBhZGRpbmc6IDEwcHg7XG4gICAgICBtYXJnaW46IDIwcHg7XG4gICAgICBmbGV4LWJhc2lzOiAxMDAlOyB9XG4gICAgICAuY29udGVudCAubGVmdC1zaWRlIC5zaGVkdWxlLW1haW4gLmhlYWQge1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogIzQ3NDkzNTtcbiAgICAgICAgYm9yZGVyLXJhZGl1czogMjBweCAyMHB4IDAgMDsgfVxuICAgICAgICAuY29udGVudCAubGVmdC1zaWRlIC5zaGVkdWxlLW1haW4gLmhlYWQgaDIge1xuICAgICAgICAgIGNvbG9yOiAjOThjYmI0OyB9XG4gICAgICAuY29udGVudCAubGVmdC1zaWRlIC5zaGVkdWxlLW1haW4gLnN1YmplY3RzIC5zdWJqLXNlY3Rpb24ge1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICBjb2xvcjogIzJjMjgwODsgfVxuICAgICAgICAuY29udGVudCAubGVmdC1zaWRlIC5zaGVkdWxlLW1haW4gLnN1YmplY3RzIC5zdWJqLXNlY3Rpb24gLm51bSB7XG4gICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICBmbGV4LWJhc2lzOiAxMCU7XG4gICAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7IH1cbiAgICAgICAgLmNvbnRlbnQgLmxlZnQtc2lkZSAuc2hlZHVsZS1tYWluIC5zdWJqZWN0cyAuc3Viai1zZWN0aW9uIC5uYW1lIHtcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgIGZsZXgtYmFzaXM6IDYwJTtcbiAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsgfVxuICAgICAgICAuY29udGVudCAubGVmdC1zaWRlIC5zaGVkdWxlLW1haW4gLnN1YmplY3RzIC5zdWJqLXNlY3Rpb24gLnRpbWUge1xuICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgZmxleC1iYXNpczogMzAlO1xuICAgICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyOyB9XG4gICAgICAuY29udGVudCAubGVmdC1zaWRlIC5zaGVkdWxlLW1haW4gLnN1YmplY3RzIC5zdWJqLXNlY3Rpb246bGFzdC1jaGlsZCB7XG4gICAgICAgIGJvcmRlci1ib3R0b206IG5vbmU7IH1cbiAgICAgIC5jb250ZW50IC5sZWZ0LXNpZGUgLnNoZWR1bGUtbWFpbiAuaGVhZCB7XG4gICAgICAgIG1hcmdpbjogLTEwcHg7XG4gICAgICAgIGZvbnQtc2l6ZTogMjBweDtcbiAgICAgICAgcGFkZGluZy10b3A6IDdweDtcbiAgICAgICAgcGFkZGluZy1ib3R0b206IDdweDsgfVxuICAgICAgLmNvbnRlbnQgLmxlZnQtc2lkZSAuc2hlZHVsZS1tYWluIC5zdWJqZWN0cyB7XG4gICAgICAgIG1hcmdpbi10b3A6IDIwcHg7XG4gICAgICAgIHBhZGRpbmctbGVmdDogMTVweDtcbiAgICAgICAgcGFkZGluZy1yaWdodDogMTVweDsgfVxuICAgICAgICAuY29udGVudCAubGVmdC1zaWRlIC5zaGVkdWxlLW1haW4gLnN1YmplY3RzIC5zdWJqLXNlY3Rpb24ge1xuICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgYm9yZGVyLWJvdHRvbTogMS41cHggc29saWQgIzQyM0IwQjtcbiAgICAgICAgICBmb250LXNpemU6IDE4cHg7XG4gICAgICAgICAgcGFkZGluZzogNHB4IDA7IH1cbiAgICAgICAgICAuY29udGVudCAubGVmdC1zaWRlIC5zaGVkdWxlLW1haW4gLnN1YmplY3RzIC5zdWJqLXNlY3Rpb24gLm51bSB7XG4gICAgICAgICAgICBwYWRkaW5nOiA1cHg7IH1cbiAgICAgICAgICAuY29udGVudCAubGVmdC1zaWRlIC5zaGVkdWxlLW1haW4gLnN1YmplY3RzIC5zdWJqLXNlY3Rpb24gLm5hbWUge1xuICAgICAgICAgICAgcGFkZGluZzogNXB4OyB9XG4gICAgICAgICAgLmNvbnRlbnQgLmxlZnQtc2lkZSAuc2hlZHVsZS1tYWluIC5zdWJqZWN0cyAuc3Viai1zZWN0aW9uIC50aW1lIHtcbiAgICAgICAgICAgIHBhZGRpbmc6IDVweDsgfVxuICAgICAgLmNvbnRlbnQgLmxlZnQtc2lkZSAuc2hlZHVsZS1tYWluIC50YXNrcyB7XG4gICAgICAgIGNvbG9yOiAjMmMyODA4O1xuICAgICAgICBwYWRkaW5nLWxlZnQ6IDEwcHg7XG4gICAgICAgIHBhZGRpbmctcmlnaHQ6IDEwcHg7IH1cbiAgICAgICAgLmNvbnRlbnQgLmxlZnQtc2lkZSAuc2hlZHVsZS1tYWluIC50YXNrcyAudGFza3MtaGVhZCB7XG4gICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsgfVxuICAgICAgICAgIC5jb250ZW50IC5sZWZ0LXNpZGUgLnNoZWR1bGUtbWFpbiAudGFza3MgLnRhc2tzLWhlYWQgaDQge1xuICAgICAgICAgICAgbWFyZ2luOiAxMHB4O1xuICAgICAgICAgICAgZm9udC1zaXplOiAyMHB4OyB9XG4gICAgICAgIC5jb250ZW50IC5sZWZ0LXNpZGUgLnNoZWR1bGUtbWFpbiAudGFza3MgLnRhc2sge1xuICAgICAgICAgIHBhZGRpbmc6IDVweDsgfVxuICAgICAgICAgIC5jb250ZW50IC5sZWZ0LXNpZGUgLnNoZWR1bGUtbWFpbiAudGFza3MgLnRhc2sgaDUge1xuICAgICAgICAgICAgZm9udC1zaXplOiAxOHB4O1xuICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogNXB4OyB9XG4gICAgICAgICAgLmNvbnRlbnQgLmxlZnQtc2lkZSAuc2hlZHVsZS1tYWluIC50YXNrcyAudGFzayBwIHtcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMTRweDtcbiAgICAgICAgICAgIG1hcmdpbi1sZWZ0OiAxMHB4OyB9XG4gIC5jb250ZW50IC5yaWdodC1zaWRlIHtcbiAgICBwYWRkaW5nLXRvcDogMTBweDtcbiAgICBmbGV4LWJhc2lzOiA2MCU7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBmbGV4LXdyYXA6IHdyYXA7XG4gICAganVzdGlmeS1jb250ZW50OiBzdGFydDtcbiAgICBtYXJnaW4tbGVmdDogMTVweDsgfVxuICAgIC5jb250ZW50IC5yaWdodC1zaWRlIC5zaGVkdWxlIHtcbiAgICAgIGZsZXgtYmFzaXM6IDI5JTtcbiAgICAgIG1hcmdpbjogMTJweDtcbiAgICAgIGJvcmRlci1yYWRpdXM6IDIwcHg7XG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjN2JhMDk4Nzk7XG4gICAgICBib3gtc2hhZG93OiAwIDAgMTBweCA1cHggcmdiYSgyMDYsIDExMCwgMTEwLCAwLjIpO1xuICAgICAgdHJhbnNpdGlvbjogYWxsIDAuNXMgZWFzZTsgfVxuICAgICAgLmNvbnRlbnQgLnJpZ2h0LXNpZGUgLnNoZWR1bGUgLmhlYWQge1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogIzQ3NDkzNTtcbiAgICAgICAgYm9yZGVyLXJhZGl1czogMjBweCAyMHB4IDAgMDsgfVxuICAgICAgICAuY29udGVudCAucmlnaHQtc2lkZSAuc2hlZHVsZSAuaGVhZCBoMiB7XG4gICAgICAgICAgY29sb3I6ICM5OGNiYjQ7IH1cbiAgICAgIC5jb250ZW50IC5yaWdodC1zaWRlIC5zaGVkdWxlIC5zdWJqZWN0cyAuc3Viai1zZWN0aW9uIHtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgY29sb3I6ICMyYzI4MDg7IH1cbiAgICAgICAgLmNvbnRlbnQgLnJpZ2h0LXNpZGUgLnNoZWR1bGUgLnN1YmplY3RzIC5zdWJqLXNlY3Rpb24gLm51bSB7XG4gICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICBmbGV4LWJhc2lzOiAxMCU7XG4gICAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7IH1cbiAgICAgICAgLmNvbnRlbnQgLnJpZ2h0LXNpZGUgLnNoZWR1bGUgLnN1YmplY3RzIC5zdWJqLXNlY3Rpb24gLm5hbWUge1xuICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgZmxleC1iYXNpczogNjAlO1xuICAgICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyOyB9XG4gICAgICAgIC5jb250ZW50IC5yaWdodC1zaWRlIC5zaGVkdWxlIC5zdWJqZWN0cyAuc3Viai1zZWN0aW9uIC50aW1lIHtcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgIGZsZXgtYmFzaXM6IDMwJTtcbiAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsgfVxuICAgICAgLmNvbnRlbnQgLnJpZ2h0LXNpZGUgLnNoZWR1bGUgLnN1YmplY3RzIC5zdWJqLXNlY3Rpb246bGFzdC1jaGlsZCB7XG4gICAgICAgIGJvcmRlci1ib3R0b206IG5vbmU7IH1cbiAgICAgIC5jb250ZW50IC5yaWdodC1zaWRlIC5zaGVkdWxlIC5oZWFkIHtcbiAgICAgICAgcGFkZGluZy1ib3R0b206IDVweDtcbiAgICAgICAgcGFkZGluZy10b3A6IDVweDsgfVxuICAgICAgLmNvbnRlbnQgLnJpZ2h0LXNpZGUgLnNoZWR1bGUgLnN1YmplY3RzIHtcbiAgICAgICAgZm9udC1zaXplOiAxNnB4O1xuICAgICAgICBtYXJnaW4tdG9wOiAxMHB4O1xuICAgICAgICBtYXJnaW46IDVweCAxNXB4OyB9XG4gICAgICAgIC5jb250ZW50IC5yaWdodC1zaWRlIC5zaGVkdWxlIC5zdWJqZWN0cyAuc3Viai1zZWN0aW9uIHtcbiAgICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICAgICAgcGFkZGluZzogNHB4IDA7XG4gICAgICAgICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICM0MjNCMEI7IH1cbiAgICAgICAgICAuY29udGVudCAucmlnaHQtc2lkZSAuc2hlZHVsZSAuc3ViamVjdHMgLnN1Ymotc2VjdGlvbiAubmFtZSB7XG4gICAgICAgICAgICBmbGV4LWJhc2lzOiAxMDAlO1xuICAgICAgICAgICAganVzdGlmeS1jb250ZW50OiBzdGFydDtcbiAgICAgICAgICAgIHBhZGRpbmctbGVmdDogMTBweDsgfVxuICAgICAgICAgIC5jb250ZW50IC5yaWdodC1zaWRlIC5zaGVkdWxlIC5zdWJqZWN0cyAuc3Viai1zZWN0aW9uIC5lcnJvciB7XG4gICAgICAgICAgICBmb250LXNpemU6IDEycHggIWltcG9ydGFudDtcbiAgICAgICAgICAgIGNvbG9yOiByZWQgIWltcG9ydGFudDsgfVxuICAgIC5jb250ZW50IC5yaWdodC1zaWRlIC5zaGVkdWxlOmhvdmVyIHtcbiAgICAgIHRyYW5zZm9ybTogc2NhbGUoMS4wNSk7XG4gICAgICBjdXJzb3I6IHBvaW50ZXI7IH1cbiAgICAuY29udGVudCAucmlnaHQtc2lkZSAubmV4dHdlZWstZmllbGQge1xuICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgIGZsZXgtYmFzaXM6IDMzJTtcbiAgICAgIGFsaWduLWl0ZW1zOiBmbGV4LWVuZDtcbiAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyOyB9XG4gICAgICAuY29udGVudCAucmlnaHQtc2lkZSAubmV4dHdlZWstZmllbGQgLm5leHR3ZWVrLWJ1dHRvbiB7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIHBhZGRpbmc6IDQwcHg7XG4gICAgICAgIGZvbnQtc2l6ZTogMjVweDtcbiAgICAgICAgY29sb3I6ICM0NzQ5MzU7IH1cbiAgICAgICAgLmNvbnRlbnQgLnJpZ2h0LXNpZGUgLm5leHR3ZWVrLWZpZWxkIC5uZXh0d2Vlay1idXR0b24gc3BhbiB7XG4gICAgICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgICAgICAgIHRyYW5zaXRpb246IGFsbCAwLjZzIGVhc2U7XG4gICAgICAgICAgcGFkZGluZzogMnB4IDEwcHg7XG4gICAgICAgICAgZm9udC1zaXplOiAyOHB4OyB9XG4gICAgICAgIC5jb250ZW50IC5yaWdodC1zaWRlIC5uZXh0d2Vlay1maWVsZCAubmV4dHdlZWstYnV0dG9uICNwcmV2d2VlayB7XG4gICAgICAgICAgb3JkZXI6IC0xOyB9XG4gICAgICAgIC5jb250ZW50IC5yaWdodC1zaWRlIC5uZXh0d2Vlay1maWVsZCAubmV4dHdlZWstYnV0dG9uICNuZXh0d2Vlazpob3ZlciB7XG4gICAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xuICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWCg1cHgpOyB9XG4gICAgICAgIC5jb250ZW50IC5yaWdodC1zaWRlIC5uZXh0d2Vlay1maWVsZCAubmV4dHdlZWstYnV0dG9uICNwcmV2d2Vlazpob3ZlciB7XG4gICAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xuICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgtNXB4KTsgfVxuICAgICAgICAuY29udGVudCAucmlnaHQtc2lkZSAubmV4dHdlZWstZmllbGQgLm5leHR3ZWVrLWJ1dHRvbiAudGhpc3dlZWtoaWRlbiB7XG4gICAgICAgICAgZGlzcGxheTogbm9uZTsgfVxuXG4ubW9kYWwge1xuICBkaXNwbGF5OiBmbGV4O1xuICB2aXNpYmlsaXR5OiBoaWRkZW47XG4gIHBvc2l0aW9uOiBmaXhlZDtcbiAgdG9wOiAwO1xuICBib3R0b206IDA7XG4gIGxlZnQ6IDA7XG4gIHJpZ2h0OiAwO1xuICBiYWNrZ3JvdW5kOiByZ2JhKDAsIDAsIDAsIDAuNjUpO1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgYWxpZ24taXRlbXM6IGNldGVyO1xuICBvcGFjaXR5OiAwO1xuICB0cmFuc2l0aW9uOiB2aXNpYmlsaXR5IDBzIGVhc2UsIG9wYWNpdHkgMC4zcyBlYXNlOyB9XG4gIC5tb2RhbCAuc2lnbi11cCB7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgIGZsZXgtYmFzaXM6IGNvbnRlbnQ7IH1cbiAgICAubW9kYWwgLnNpZ24tdXAgLmhpZGRlbiB7XG4gICAgICBkaXNwbGF5OiBub25lOyB9XG4gICAgLm1vZGFsIC5zaWduLXVwIC5zaWduLWJsb2NrIHtcbiAgICAgIGJvcmRlci1yYWRpdXM6IDIwcHg7XG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjN2JhMDk4Nzk7XG4gICAgICBib3gtc2hhZG93OiAwIDAgMTBweCA1cHggcmdiYSgyMDYsIDExMCwgMTEwLCAwLjIpO1xuICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2FiYjhhZDtcbiAgICAgIG1pbi13aWR0aDogNTAwcHg7XG4gICAgICBwYWRkaW5nOiAyNXB4O1xuICAgICAgcG9zaXRpb246IHJlbGF0aXZlOyB9XG4gICAgICAubW9kYWwgLnNpZ24tdXAgLnNpZ24tYmxvY2sgaDIge1xuICAgICAgICBjb2xvcjogIzQ3NDkzNTtcbiAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgICAgICBmb250LXNpemU6IDM1cHg7IH1cbiAgICAgIC5tb2RhbCAuc2lnbi11cCAuc2lnbi1ibG9jayAuY3Jvc3Mge1xuICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgcmlnaHQ6IDQlO1xuICAgICAgICB0b3A6IDQlO1xuICAgICAgICBwYWRkaW5nOiA1cHg7XG4gICAgICAgIGNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuNSk7IH1cbiAgICAgICAgLm1vZGFsIC5zaWduLXVwIC5zaWduLWJsb2NrIC5jcm9zcyBzcGFuIHtcbiAgICAgICAgICBmb250LXNpemU6IDI1cHg7IH1cbiAgICAgIC5tb2RhbCAuc2lnbi11cCAuc2lnbi1ibG9jayAuY3Jvc3M6aG92ZXIge1xuICAgICAgICBjb2xvcjogcmdiYSgwLCAwLCAwLCAwLjkpO1xuICAgICAgICBjdXJzb3I6IHBvaW50ZXI7IH1cbiAgICAgIC5tb2RhbCAuc2lnbi11cCAuc2lnbi1ibG9jayAuc2lnbi1oZWFkIHtcbiAgICAgICAgZm9udC1zaXplOiAzMHB4O1xuICAgICAgICBwYWRkaW5nLWJvdHRvbTogMTBweDtcbiAgICAgICAgYm9yZGVyLWJvdHRvbTogM3B4IHNvbGlkICM0NzQ5MzU7XG4gICAgICAgIG1hcmdpbjogMCA0MHB4OyB9XG4gICAgICAubW9kYWwgLnNpZ24tdXAgLnNpZ24tYmxvY2sgLnNpZ24tZm9ybSB7XG4gICAgICAgIHBhZGRpbmctdG9wOiA1MHB4O1xuICAgICAgICBwYWRkaW5nLWJvdHRvbTogMzBweDtcbiAgICAgICAgYm9yZGVyLWJvdHRvbTogM3B4IHNvbGlkICM0NzQ5MzU7XG4gICAgICAgIG1hcmdpbjogMCA0MHB4O1xuICAgICAgICBtYXJnaW4tYm90dG9tOiAzN3B4O1xuICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsgfVxuICAgICAgICAubW9kYWwgLnNpZ24tdXAgLnNpZ24tYmxvY2sgLnNpZ24tZm9ybSAjc2lnbi1lcnJvcnMgcCB7XG4gICAgICAgICAgY29sb3I6IHJlZCAhaW1wb3J0YW50O1xuICAgICAgICAgIHBhZGRpbmctbGVmdDogMjBweDtcbiAgICAgICAgICBmb250LXNpemU6IDE1cHg7IH1cbiAgICAgICAgLm1vZGFsIC5zaWduLXVwIC5zaWduLWJsb2NrIC5zaWduLWZvcm0gLmZvcm0ge1xuICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgbWFyZ2luLWJvdHRvbTogMzBweDtcbiAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsgfVxuICAgICAgICAgIC5tb2RhbCAuc2lnbi11cCAuc2lnbi1ibG9jayAuc2lnbi1mb3JtIC5mb3JtIGlucHV0IHtcbiAgICAgICAgICAgIGZsZXgtYmFzaXM6IDkwJTtcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMjBweDtcbiAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDEwcHg7XG4gICAgICAgICAgICBib3JkZXI6IDFweCBzb2xpZCAjMmMyODA4O1xuICAgICAgICAgICAgcGFkZGluZzogNXB4O1xuICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2VkZjVmMTtcbiAgICAgICAgICAgIHRyYW5zaXRpb246IGJveC1zaGFkb3cgMC4zcyBlYXNlOyB9XG4gICAgICAgICAgLm1vZGFsIC5zaWduLXVwIC5zaWduLWJsb2NrIC5zaWduLWZvcm0gLmZvcm0gaW5wdXQ6Zm9jdXMge1xuICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogMTBweDtcbiAgICAgICAgICAgIGJveC1zaGFkb3c6IDAgMCAwIDRweCBzb2xpZCAjMmMyODA4O1xuICAgICAgICAgICAgb3V0bGluZTogbm9uZTsgfVxuICAgICAgICAubW9kYWwgLnNpZ24tdXAgLnNpZ24tYmxvY2sgLnNpZ24tZm9ybSBhIHtcbiAgICAgICAgICBib3JkZXItcmFkaXVzOiAxNXB4O1xuICAgICAgICAgIGZvbnQtc2l6ZTogMjVweDtcbiAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjQjVGRUQ5O1xuICAgICAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgICAgIHdpZHRoOiA3NSU7XG4gICAgICAgICAgbWFyZ2luOiAwIGF1dG87XG4gICAgICAgICAgbWFyZ2luLXRvcDogNDBweCAhaW1wb3J0YW50O1xuICAgICAgICAgIG9wYWNpdHk6IDAuODsgfVxuICAgICAgICAgIC5tb2RhbCAuc2lnbi11cCAuc2lnbi1ibG9jayAuc2lnbi1mb3JtIGEgaDQge1xuICAgICAgICAgICAgcGFkZGluZzogNXB4O1xuICAgICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgICAgICAgICAgY29sb3I6ICM0MjNCMEI7IH1cbiAgICAgICAgLm1vZGFsIC5zaWduLXVwIC5zaWduLWJsb2NrIC5zaWduLWZvcm0gYTpob3ZlciB7XG4gICAgICAgICAgZmlsdGVyOiBjb250cmFzdCg4NSUpO1xuICAgICAgICAgIG9wYWNpdHk6IC43NTsgfVxuICAgICAgICAubW9kYWwgLnNpZ24tdXAgLnNpZ24tYmxvY2sgLnNpZ24tZm9ybSAuZm9ybTpsYXN0LWNoaWxkIHtcbiAgICAgICAgICBtYXJnaW4tYm90dG9tOiAwOyB9XG5cbi52aXMge1xuICB2aXNpYmlsaXR5OiB2aXNpYmxlO1xuICBvcGFjaXR5OiAxOyB9XG4iLCJAaW1wb3J0ICdtZWRpYSc7XG5AaW1wb3J0ICcuLi8uLi9ub2RlX21vZHVsZXMvbm9ybWFsaXplLmNzcy9ub3JtYWxpemUnO1xuXG4kb2xpdmU6ICM0MjNCMEI7XG4kbWludDogI0I1RkVEOTtcbiRsaWdodC1ncmVlbjogIzk4Y2JiNDtcbiRncmV5OiAjN2JhMDk4Nzk7XG4kZGFyay1ncmVlbjogIzQ3NDkzNTtcbiRibGFjazogIzJjMjgwODtcblxuQG1peGluIGJsb2NrLWxpa2Uge1xuICAgIGJvcmRlci1yYWRpdXM6IDIwcHg7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogJGdyZXk7XG4gICAgYm94LXNoYWRvdzogMCAwIDEwcHggNXB4IHJnYmEoMjA2LCAxMTAsIDExMCwgMC4yKTsgfVxuXG5AbWl4aW4gc2hlZHVsZSB7XG4gICAgQGluY2x1ZGUgYmxvY2stbGlrZTtcbiAgICAuaGVhZCB7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkZGFyay1ncmVlbjtcbiAgICAgICAgYm9yZGVyLXJhZGl1czogMjBweCAyMHB4IDAgMDtcbiAgICAgICAgaDIge1xuICAgICAgICAgICAgY29sb3I6ICRsaWdodC1ncmVlbjsgfSB9XG4gICAgLnN1YmplY3RzIHtcbiAgICAgICAgLnN1Ymotc2VjdGlvbiB7XG4gICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgICAgY29sb3I6ICRibGFjaztcbiAgICAgICAgICAgIC5udW0ge1xuICAgICAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgICAgICAgZmxleC1iYXNpczogMTAlO1xuICAgICAgICAgICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyOyB9XG4gICAgICAgICAgICAubmFtZSB7XG4gICAgICAgICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICAgICAgICBmbGV4LWJhc2lzOiA2MCU7XG4gICAgICAgICAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7IH1cbiAgICAgICAgICAgIC50aW1lIHtcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgICAgICAgIGZsZXgtYmFzaXM6IDMwJTtcbiAgICAgICAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsgfSB9XG4gICAgICAgIC5zdWJqLXNlY3Rpb246bGFzdC1jaGlsZCB7XG4gICAgICAgICAgICAgICAgYm9yZGVyLWJvdHRvbTogbm9uZTsgfSB9IH1cblxuXG5ib2R5IHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjdmNWVmO1xuICAgIHAsIGg1LCBoMiwgaDQsIGgzIHtcbiAgICAgICAgY29sb3I6ICRibGFjaztcbiAgICAgICAgbWFyZ2luOiAwOyB9XG4gICAgYSB7XG4gICAgICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbiAgICAgICAgY29sb3I6ICRibGFjaztcbiAgICAgICAgY3Vyc29yOiBwb2ludGVyOyB9IH1cblxuLmhlYWRlciB7XG4gICAgcGFkZGluZzogMCAxMHB4O1xuICAgIGJhY2tncm91bmQtY29sb3I6ICRtaW50O1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgbWF4LWhlaWdodDogMTB2aDtcbiAgICBwYWRkaW5nOiAxMHB4O1xuICAgIGJvcmRlci1yYWRpdXM6IDAgMCAzMHB4IDMwcHg7XG4gICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICRsaWdodC1ncmVlbjtcbiAgICBib3gtc2hhZG93OiAtMnB4IDAgMjBweCAycHggJGxpZ2h0LWdyZWVuO1xuICAgIGNvbG9yOiAkZGFyay1ncmVlbjtcbiAgICAubG9nbyB7XG4gICAgICAgIGZsZXgtYmFzaXM6IDU1JTtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBzdGFydDtcbiAgICAgICAgaDMge1xuICAgICAgICAgICAgbWFyZ2luOiAwO1xuICAgICAgICAgICAgZm9udC1zaXplOiAzMHB4O1xuICAgICAgICAgICAgYm9yZGVyLXJpZ2h0OiAycHggc29saWQgJGRhcmstZ3JlZW47XG4gICAgICAgICAgICBwYWRkaW5nOiA4cHg7XG4gICAgICAgICAgICBwYWRkaW5nLWxlZnQ6IDEycHg7XG4gICAgICAgICAgICBwYWRkaW5nLXJpZ2h0OiAxMnB4OyB9XG4gICAgICAgIGgzOmxhc3QtY2hpbGQge1xuICAgICAgICAgICAgYm9yZGVyLXJpZ2h0OiBub25lOyB9XG4gICAgICAgIGltZyB7XG4gICAgICAgICAgICB3aWR0aDogNzNweDtcbiAgICAgICAgICAgIGhlaWdodDogNzNweDtcbiAgICAgICAgICAgIG1hcmdpbjogLTEwcHggMDtcbiAgICAgICAgICAgIG1hcmdpbi1yaWdodDogMjBweDtcbiAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDIwcHg7XG4gICAgICAgICAgICBib3JkZXI6IDJweCBzb2xpZCAkZGFyay1ncmVlbjtcbiAgICAgICAgICAgIG1hcmdpbi1sZWZ0OiA4JTsgfSB9XG4gICAgLm1lbnUge1xuICAgICAgICBmbGV4LWJhc2lzOiAzNyU7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIG1hcmdpbi1yaWdodDogNSU7XG4gICAgICAgIG1hcmdpbi1ib3R0b206IC0xMHB4O1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICBmbGV4LWZsb3c6IHJvdy1yZXZlcnNlO1xuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICBhIHtcbiAgICAgICAgICAgIG1hcmdpbi1sZWZ0OiAyMHB4O1xuICAgICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICAgICAgICB0cmFuc2l0aW9uOiBhbGwgMC41cyBlYXNlO1xuICAgICAgICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgICAgICAgICAgIGJvcmRlci10b3A6IDAgc29saWQgJG1pbnQ7IH1cbiAgICAgICAgYTpob3ZlciB7XG4gICAgICAgICAgICBib3gtc2hhZG93OiBpbnNldCAwIC00cHggMCAwICRvbGl2ZTsgfVxuICAgICAgICAubWVuLWJ1dHRvbiB7XG4gICAgICAgICAgICBmb250LXNpemU6IDIwcHg7XG4gICAgICAgICAgICBmb250LXdlaWdodDogYm9sZDtcbiAgICAgICAgICAgIGNvbG9yOiAkb2xpdmU7IH0gfSB9XG5cblxuQGltcG9ydCAnY29tbW9uL2NvbnRlbnQnO1xuXG5AaW1wb3J0ICdjb21tb24vc2lnbic7XG4iLCIuY29udGVudCB7XG4gICAgaGVpZ2h0OiA4NnZoO1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgd2lkdGg6IDk1JTtcbiAgICBtYXJnaW46IDAgYXV0bztcbiAgICAubGVmdC1zaWRlIHtcbiAgICAgICAgZmxleC1iYXNpczogNDAlO1xuICAgICAgICBwYWRkaW5nOiAxMHB4O1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICBmbGV4LWZsb3c6IGNvbHVtbjtcbiAgICAgICAgLnNoZWR1bGUtbWFpbiB7XG4gICAgICAgICAgICBAaW5jbHVkZSBzaGVkdWxlO1xuICAgICAgICAgICAgcGFkZGluZzogMTBweDtcbiAgICAgICAgICAgIG1hcmdpbjogMjBweDtcbiAgICAgICAgICAgIGZsZXgtYmFzaXM6IDEwMCU7XG4gICAgICAgICAgICAuaGVhZCB7XG4gICAgICAgICAgICAgICAgbWFyZ2luOiAtMTBweDtcbiAgICAgICAgICAgICAgICBmb250LXNpemU6IDIwcHg7XG4gICAgICAgICAgICAgICAgcGFkZGluZy10b3A6IDdweDtcbiAgICAgICAgICAgICAgICBwYWRkaW5nLWJvdHRvbTogN3B4OyB9XG4gICAgICAgICAgICAuc3ViamVjdHMge1xuICAgICAgICAgICAgICAgIG1hcmdpbi10b3A6IDIwcHg7XG4gICAgICAgICAgICAgICAgcGFkZGluZy1sZWZ0OiAxNXB4O1xuICAgICAgICAgICAgICAgIHBhZGRpbmctcmlnaHQ6IDE1cHg7XG4gICAgICAgICAgICAgICAgLnN1Ymotc2VjdGlvbiB7XG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgICAgICAgICAgIGJvcmRlci1ib3R0b206IDEuNXB4IHNvbGlkICRvbGl2ZTtcbiAgICAgICAgICAgICAgICAgICAgZm9udC1zaXplOiAxOHB4O1xuICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiA0cHggMDtcbiAgICAgICAgICAgICAgICAgICAgLm51bSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiA1cHg7IH1cbiAgICAgICAgICAgICAgICAgICAgLm5hbWUge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogNXB4OyB9XG4gICAgICAgICAgICAgICAgICAgIC50aW1lIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IDVweDsgfSB9IH1cbiAgICAgICAgICAgIC50YXNrcyB7XG4gICAgICAgICAgICAgICAgY29sb3I6ICRibGFjaztcbiAgICAgICAgICAgICAgICBwYWRkaW5nLWxlZnQ6IDEwcHg7XG4gICAgICAgICAgICAgICAgcGFkZGluZy1yaWdodDogMTBweDtcbiAgICAgICAgICAgICAgICAudGFza3MtaGVhZCB7XG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgICAgICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgICAgICAgICAgICAgICAgICBoNCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW46IDEwcHg7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb250LXNpemU6IDIwcHg7IH0gfVxuICAgICAgICAgICAgICAgIC50YXNrIHtcbiAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogNXB4O1xuICAgICAgICAgICAgICAgICAgICBoNSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb250LXNpemU6IDE4cHg7XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW4tYm90dG9tOiA1cHg7IH1cbiAgICAgICAgICAgICAgICAgICAgcCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb250LXNpemU6IDE0cHg7XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW4tbGVmdDogMTBweDsgfSB9IH0gfSB9XG4gICAgLnJpZ2h0LXNpZGUge1xuICAgICAgICBwYWRkaW5nLXRvcDogMTBweDtcbiAgICAgICAgZmxleC1iYXNpczogNjAlO1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICBmbGV4LXdyYXA6IHdyYXA7XG4gICAgICAgIGp1c3RpZnktY29udGVudDogc3RhcnQ7XG4gICAgICAgIG1hcmdpbi1sZWZ0OiAxNXB4O1xuICAgICAgICAuc2hlZHVsZSB7XG4gICAgICAgICAgICBmbGV4LWJhc2lzOiAyOSU7XG4gICAgICAgICAgICBtYXJnaW46IDEycHg7XG4gICAgICAgICAgICBAaW5jbHVkZSBzaGVkdWxlO1xuICAgICAgICAgICAgdHJhbnNpdGlvbjogYWxsIDAuNXMgZWFzZTtcbiAgICAgICAgICAgIC5oZWFkIHtcbiAgICAgICAgICAgICAgICBwYWRkaW5nLWJvdHRvbTogNXB4O1xuICAgICAgICAgICAgICAgIHBhZGRpbmctdG9wOiA1cHg7IH1cbiAgICAgICAgICAgIC5zdWJqZWN0cyB7XG4gICAgICAgICAgICAgICAgZm9udC1zaXplOiAxNnB4O1xuICAgICAgICAgICAgICAgIG1hcmdpbi10b3A6IDEwcHg7XG4gICAgICAgICAgICAgICAgbWFyZ2luOiA1cHggMTVweDtcbiAgICAgICAgICAgICAgICAuc3Viai1zZWN0aW9uIHtcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiA0cHggMDtcbiAgICAgICAgICAgICAgICAgICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICRvbGl2ZTtcbiAgICAgICAgICAgICAgICAgICAgLm5hbWUge1xuICAgICAgICAgICAgICAgICAgICAgICAgZmxleC1iYXNpczogMTAwJTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGp1c3RpZnktY29udGVudDogc3RhcnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYWRkaW5nLWxlZnQ6IDEwcHg7IH1cbiAgICAgICAgICAgICAgICAgICAgLmVycm9yIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMTJweCAhaW1wb3J0YW50O1xuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IHJlZCAhaW1wb3J0YW50OyB9IH0gfSB9XG4gICAgICAgIC5zaGVkdWxlOmhvdmVyIHtcbiAgICAgICAgICAgIHRyYW5zZm9ybTogc2NhbGUoMS4wNSk7XG4gICAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7IH1cbiAgICAgICAgLm5leHR3ZWVrLWZpZWxkIHtcbiAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgICBmbGV4LWJhc2lzOiAzMyU7XG4gICAgICAgICAgICBhbGlnbi1pdGVtczogZmxleC1lbmQ7XG4gICAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICAgICAgICAgIC5uZXh0d2Vlay1idXR0b24ge1xuICAgICAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgICAgICAgcGFkZGluZzogNDBweDtcbiAgICAgICAgICAgICAgICBmb250LXNpemU6IDI1cHg7XG4gICAgICAgICAgICAgICAgY29sb3I6ICRkYXJrLWdyZWVuO1xuICAgICAgICAgICAgICAgIHNwYW4ge1xuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgICAgICAgICAgICAgICAgIHRyYW5zaXRpb246IGFsbCAwLjZzIGVhc2U7XG4gICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IDJweCAxMHB4O1xuICAgICAgICAgICAgICAgICAgICBmb250LXNpemU6IDI4cHg7IH1cbiAgICAgICAgICAgICAgICAjcHJldndlZWsge1xuICAgICAgICAgICAgICAgICAgICBvcmRlcjogLTE7IH1cbiAgICAgICAgICAgICAgICAjbmV4dHdlZWs6aG92ZXIge1xuICAgICAgICAgICAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWCg1cHgpOyB9XG4gICAgICAgICAgICAgICAgI3ByZXZ3ZWVrOmhvdmVyIHtcbiAgICAgICAgICAgICAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xuICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTVweCk7IH1cbiAgICAgICAgICAgICAgICAudGhpc3dlZWtoaWRlbiB7XG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IG5vbmU7IH0gfSB9IH0gfVxuIiwiLm1vZGFsIHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIHZpc2liaWxpdHk6IGhpZGRlbjtcbiAgICBwb3NpdGlvbjogZml4ZWQ7XG4gICAgdG9wOiAwO1xuICAgIGJvdHRvbTogMDtcbiAgICBsZWZ0OiAwO1xuICAgIHJpZ2h0OiAwO1xuICAgIGJhY2tncm91bmQ6IHJnYmEoMCwwLDAsMC42NSk7XG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgYWxpZ24taXRlbXM6IGNldGVyO1xuICAgIG9wYWNpdHk6IDA7XG4gICAgdHJhbnNpdGlvbjogdmlzaWJpbGl0eSAwcyBlYXNlLCBvcGFjaXR5IDAuM3MgZWFzZTtcbiAgICAuc2lnbi11cCB7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgICAgICBmbGV4LWJhc2lzOiBjb250ZW50O1xuICAgICAgICAuaGlkZGVuIHtcbiAgICAgICAgICAgIGRpc3BsYXk6IG5vbmU7IH1cbiAgICAgICAgLnNpZ24tYmxvY2sge1xuICAgICAgICAgICAgQGluY2x1ZGUgYmxvY2stbGlrZTtcbiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNhYmI4YWQ7XG4gICAgICAgICAgICBtaW4td2lkdGg6IDUwMHB4O1xuICAgICAgICAgICAgcGFkZGluZzogMjVweDtcbiAgICAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgICAgICAgIGgyIHtcbiAgICAgICAgICAgICAgICBjb2xvcjogJGRhcmstZ3JlZW47XG4gICAgICAgICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMzVweDsgfVxuICAgICAgICAgICAgLmNyb3NzIHtcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgICAgICAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICAgICAgICAgIHJpZ2h0OiA0JTtcbiAgICAgICAgICAgICAgICB0b3A6IDQlO1xuICAgICAgICAgICAgICAgIHBhZGRpbmc6IDVweDtcbiAgICAgICAgICAgICAgICBjb2xvcjogcmdiYSgwLCAwLCAwLCAwLjUpO1xuICAgICAgICAgICAgICAgIHNwYW4ge1xuICAgICAgICAgICAgICAgICAgICBmb250LXNpemU6IDI1cHg7IH0gfVxuICAgICAgICAgICAgLmNyb3NzOmhvdmVyIHtcbiAgICAgICAgICAgICAgICBjb2xvcjogcmdiYSgwLCAwLCAwLCAwLjkpO1xuICAgICAgICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjsgfVxuICAgICAgICAgICAgLnNpZ24taGVhZCB7XG4gICAgICAgICAgICAgICAgZm9udC1zaXplOiAzMHB4O1xuICAgICAgICAgICAgICAgIHBhZGRpbmctYm90dG9tOiAxMHB4O1xuICAgICAgICAgICAgICAgIGJvcmRlci1ib3R0b206IDNweCAgc29saWQgJGRhcmstZ3JlZW47XG4gICAgICAgICAgICAgICAgbWFyZ2luOiAwIDQwcHg7IH1cbiAgICAgICAgICAgIC5zaWduLWZvcm0ge1xuICAgICAgICAgICAgICAgIHBhZGRpbmctdG9wOiA1MHB4O1xuICAgICAgICAgICAgICAgIHBhZGRpbmctYm90dG9tOiAzMHB4O1xuICAgICAgICAgICAgICAgIGJvcmRlci1ib3R0b206IDNweCAgc29saWQgJGRhcmstZ3JlZW47XG4gICAgICAgICAgICAgICAgbWFyZ2luOiAwIDQwcHg7XG4gICAgICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogMzdweDtcbiAgICAgICAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICAgICAgICAgICAgICAjc2lnbi1lcnJvcnMge1xuICAgICAgICAgICAgICAgICAgICBwIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiByZWQgIWltcG9ydGFudDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmctbGVmdDogMjBweDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMTVweDsgfSB9XG4gICAgICAgICAgICAgICAgLmZvcm0ge1xuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAzMHB4O1xuICAgICAgICAgICAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICAgICAgICAgICAgICAgICAgaW5wdXQge1xuICAgICAgICAgICAgICAgICAgICAgICAgZmxleC1iYXNpczogOTAlO1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9udC1zaXplOiAyMHB4O1xuICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogMTBweDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlcjogMXB4IHNvbGlkICRibGFjaztcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IDVweDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNlZGY1ZjE7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uOiBib3gtc2hhZG93IDAuM3MgZWFzZTsgfVxuICAgICAgICAgICAgICAgICAgICBpbnB1dDpmb2N1cyB7XG4gICAgICAgICAgICAgICAgICAgICAgICBib3JkZXItcmFkaXVzOiAxMHB4O1xuICAgICAgICAgICAgICAgICAgICAgICAgYm94LXNoYWRvdzogMCAwIDAgNHB4IHNvbGlkICRibGFjaztcbiAgICAgICAgICAgICAgICAgICAgICAgIG91dGxpbmU6IG5vbmU7IH0gfVxuICAgICAgICAgICAgICAgIGEge1xuICAgICAgICAgICAgICAgICAgICBib3JkZXItcmFkaXVzOiAxNXB4O1xuICAgICAgICAgICAgICAgICAgICBmb250LXNpemU6IDI1cHg7XG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICRtaW50O1xuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDc1JTtcbiAgICAgICAgICAgICAgICAgICAgbWFyZ2luOiAwIGF1dG87XG4gICAgICAgICAgICAgICAgICAgIG1hcmdpbi10b3A6IDQwcHggIWltcG9ydGFudDtcbiAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogMC44O1xuICAgICAgICAgICAgICAgICAgICBoNCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiA1cHg7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogJG9saXZlOyB9IH1cbiAgICAgICAgICAgICAgICBhOmhvdmVyIHtcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyOiBjb250cmFzdCg4NSUpO1xuICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiAuNzU7IH1cbiAgICAgICAgICAgICAgICAuZm9ybTpsYXN0LWNoaWxkIHtcbiAgICAgICAgICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogMDsgfSB9IH0gfSB9XG5cbi52aXMge1xuICAgIHZpc2liaWxpdHk6IHZpc2libGU7XG4gICAgb3BhY2l0eTogMTsgfVxuIl19 */
