"use strict";

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

///////////////// SOME FUNCTIONS //////////////////
var log = mess => {
  console.log(mess);
};

var responseResult = (response, status, good_result, bad_result) => {
  if (response.status == status) good_result(response);else bad_result();
};

var goTo = element => {
  var offset = element.offset();
  offset.left -= 20;
  offset.top -= 50;
  $('html, body').animate({
    scrollTop: offset.top,
    scrollLeft: offset.left
  });
}; //////////////////////////////////////////////////
/////////////// MENU JS CODE /////////////////////


var this_week = 0;
$('#sign').on('click', () => {
  $('section.modal').addClass('vis');
});
$('#shemes').click(() => {
  $('section.content').addClass('hidden');
  $('.room-settings').removeClass('hidden');
});
$(".header .logo img").click(() => {
  $('section.content').removeClass('hidden');
  $('.room-settings').addClass('hidden');
});
$('#nextweek').click(() => {
  var wek = $('.nextweek-button h3');
  wek.html('Week 2');
  $('#nextweek').addClass('thisweekhiden');
  $('#prevweek').removeClass('thisweekhiden');
  this_week = 1;
  displayDays(Weeks[this_week]);
});
$('#prevweek').click(() => {
  $('.nextweek-button h3').html('Week 1');
  $('#prevweek').addClass('thisweekhiden');
  $('#nextweek').removeClass('thisweekhiden');
  this_week = 0;
  displayDays(Weeks[this_week]);
}); ///////////////////////////////////////////////////////
///////////////////// SHEDULE //////////////////////
//////////////////// DISPLAY //////////////////

var Weeks = [{
  Monday: {
    subjects: [['', ''], ['', ''], ['', ''], ['', ''], ['', '']],
    times: ['8:30 - 10:05', '10:25 - 12:00', '12:20 - 13:55', '14:15 - 15:50', '16:10 - 17:45'],
    tasks: []
  },
  Tuesday: {
    subjects: [['', ''], ['', ''], ['', ''], ['', ''], ['', '']],
    times: ['8:30 - 10:05', '10:25 - 12:00', '12:20 - 13:55', '14:15 - 15:50', '16:10 - 17:45'],
    tasks: []
  },
  Wednesday: {
    subjects: [['', ''], ['', ''], ['', ''], ['', ''], ['', '']],
    times: ['8:30 - 10:05', '10:25 - 12:00', '12:20 - 13:55', '14:15 - 15:50', '16:10 - 17:45'],
    tasks: []
  },
  Thursday: {
    subjects: [['', ''], ['', ''], ['', ''], ['', ''], ['', '']],
    times: ['8:30 - 10:05', '10:25 - 12:00', '12:20 - 13:55', '14:15 - 15:50', '16:10 - 17:45'],
    tasks: []
  },
  Friday: {
    subjects: [['', ''], ['', ''], ['', ''], ['', ''], ['', '']],
    times: ['8:30 - 10:05', '10:25 - 12:00', '12:20 - 13:55', '14:15 - 15:50', '16:10 - 17:45'],
    tasks: []
  },
  Saturday: {
    subjects: [['', ''], ['', ''], ['', ''], ['', ''], ['', '']],
    times: ['8:30 - 10:05', '10:25 - 12:00', '12:20 - 13:55', '14:15 - 15:50', '16:10 - 17:45'],
    tasks: []
  }
}, {
  Monday: {
    subjects: [['', ''], ['', ''], ['', ''], ['', ''], ['', '']],
    times: ['8:30 - 10:05', '10:25 - 12:00', '12:20 - 13:55', '14:15 - 15:50', '16:10 - 17:45'],
    tasks: []
  },
  Tuesday: {
    subjects: [['', ''], ['', ''], ['', ''], ['', ''], ['', '']],
    times: ['8:30 - 10:05', '10:25 - 12:00', '12:20 - 13:55', '14:15 - 15:50', '16:10 - 17:45'],
    tasks: []
  },
  Wednesday: {
    subjects: [['', ''], ['', ''], ['', ''], ['', ''], ['', '']],
    times: ['8:30 - 10:05', '10:25 - 12:00', '12:20 - 13:55', '14:15 - 15:50', '16:10 - 17:45'],
    tasks: []
  },
  Thursday: {
    subjects: [['', ''], ['', ''], ['', ''], ['', ''], ['', '']],
    times: ['8:30 - 10:05', '10:25 - 12:00', '12:20 - 13:55', '14:15 - 15:50', '16:10 - 17:45'],
    tasks: []
  },
  Friday: {
    subjects: [['', ''], ['', ''], ['', ''], ['', ''], ['', '']],
    times: ['8:30 - 10:05', '10:25 - 12:00', '12:20 - 13:55', '14:15 - 15:50', '16:10 - 17:45'],
    tasks: []
  },
  Saturday: {
    subjects: [['', ''], ['', ''], ['', ''], ['', ''], ['', '']],
    times: ['8:30 - 10:05', '10:25 - 12:00', '12:20 - 13:55', '14:15 - 15:50', '16:10 - 17:45'],
    tasks: []
  }
}];

var postSubjects = () => {
  var array_of_all_subjects;
  var object_of_days_and_orders = {};

  for (var day of ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]) {
    for (var _week of Weeks) {
      var oneday_subjects = _week[day][subjects];

      for (item in oneday_subjects) {
        if (item in object_of_days_and_orders) {
          object_of_days_and_orders[item[0]].push({
            day: oneday_subjects.indexOf(item) + 1
          });
        } else {
          object_of_days_and_orders[item[0]] = [{
            day: oneday_subjects.indexOf(item) + 1
          }];
        }
      }

      array_of_all_subjects.concat(_week[day]);
    }
  }

  var all_subjects = new Set(array_of_all_subjects);

  for (subject in all_subjects) {
    window.fetch('/api/subjects/', {
      headers: {
        'Accept': 'application/json, text/plain',
        'Content-Type': 'application/json;charset=UTF-8'
      },
      method: 'POST',
      body: JSON.stringify({
        days_and_orders: object_of_days_and_orders[subject],
        name: subject[0],
        lector: subject[1]
      })
    }).then(response => responseResult(response, 200, log(response), () => {
      throw Error(response);
    }));
  }
};

var postTimeShemes = () => {
  var object_sheme = {};

  for (week of Weeks) {
    var weekID = Weeks.indexOf(week) + 1;
    object_sheme["week".concat(WeekID)] = {};

    for (var day of ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]) {
      object_sheme["week".concat(WeekID)][day] = {};

      for (var subjsheme of week[day][times]) {
        subjsheme = subjsheme.split(' - ');
      }

      window.fetch('/api/timeshemes/', {
        headers: {
          'Accept': 'application/json, text/plain',
          'Content-Type': 'application/json;charset=UTF-8'
        },
        method: 'POST',
        body: JSON.stringify({
          items: {}
        })
      }).then(response => responseResult(response, 200, log(response), () => {
        throw Error(response);
      }));
    }
  }
};

var getWeek = () => {};

getWeek();

var getDayId = daytag => ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"].indexOf(daytag);

var displayShedule = (jquerObj, week_day) => {
  for (var index = 0; index < 5; index++) {
    var subjsection = jquerObj.find("div.subj-section.".concat(index + 1));
    subjsection.find('.name').html(week_day['subjects'][index]);
    subjsection.find('.time').html(week_day['times'][index]);
  }
};

var displayDays = function displayDays(week) {
  var mainDay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;
  var arrayOfWeekdays = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
  var currentDay = mainDay == -1 ? new Date().getDay() - 1 : mainDay;
  if (mainDay == -1) mainDay++;
  $('.shedule-main').find('h2').html(arrayOfWeekdays[currentDay]);
  displayShedule($('.shedule-main'), week[arrayOfWeekdays[currentDay]]);

  for (var i = 1, j = 0; i <= 5; i++, j++) {
    if (j == currentDay) {
      i--;
      continue;
    }

    $(".shedule.".concat(i)).find('h2').html(arrayOfWeekdays[j]);
    displayShedule($(".shedule.".concat(i)), week[arrayOfWeekdays[j]]);
  }
};

var changeSheduleSubject = thisweek => {
  var day = $('.shedule-main').find('h2').text();
  var parsefrom = $('.shedule-main .subjects .subj-section');

  for (var i = 0; i < 5; i++) {
    Weeks[thisweek][day]['subjects'][i] = $(parsefrom[i]).find('.name').text();
    console.log($(parsefrom[i]).html());
  }

  postWeek();
};

var changeSheduleTime = (thisweek, time) => {
  var time_expr = /^\d{1,2}:\d{2} - \d{1,2}:\d{2}$/;

  if (time.text().match(time_expr)) {
    var day = $('.shedule-main').find('h2').text();
    var parsefrom = $('.shedule-main .subjects .subj-section');

    for (var i = 0; i < 5; i++) {
      Weeks[thisweek][day]['times'][i] = $(parsefrom[i]).find('.time').text();
      console.log($(parsefrom[i]).html());
    }
  } else {
    time.addClass('error');
    time.text('Input time correctly');
  }
};

$('.shedule-main').find('.subj-section .time').on('focus', function () {
  if ($(this).text() == 'Input time correctly') {
    $(this).text('');
    $(this).removeClass('error');
  }
});
$('.shedule-main').find('.subj-section .name').on('focusout', () => {
  changeSheduleSubject(this_week);
  console.log(Weeks);
});
$('.shedule-main').find('.subj-section .time').on('focusout', function () {
  changeSheduleTime(this_week, $(this));
  console.log(Weeks);
});
$('.shedule').on('click', function () {
  var daytag = $(this).find('h2').text();
  console.log(getDayId(daytag));
  displayDays(Weeks[this_week], getDayId(daytag));
});
$(function () {
  displayDays(Weeks[this_week]);
}); //////////////////////////////////////////////////////
/////////////////// SIGNING JS CODE ///////////////////

function signUpSucessful(resp, username, password) {
  resp.json().then(data => {
    $('#sign-sucess').html("<h2>Welcome to the club, buddy </h2>\n        <h2>".concat(data.email, "</h2>"));
    $('#sign-form').addClass('hidden');
    $('#sign-sucess').removeClass('hidden');
    setTimeout(() => {
      $('.modal').removeClass('vis');
    }, 5000);
  });
  window.fetch('/api/api-token-auth/', {
    headers: {
      'Accept': 'application/json, text/plain',
      'Content-Type': 'application/json;charset=UTF-8'
    },
    method: 'POST',
    body: JSON.stringify({
      username: username,
      password: password
    })
  }).then(response => saveToken(response));
  setTimeout(() => {
    alert(read_cookie('token'));
  }, 5000);
}

function signUpFail(resp) {
  resp.json().then(data => {
    $('#sign-errors').html("<p> *Error ".concat(data.email, " </p>"));
  });
}

function signUp(_ref) {
  var [username, password] = _ref;
  log(JSON.stringify({
    email: username,
    password: password
  }));
  window.fetch('/api/create-user/', {
    headers: {
      'Accept': 'application/json, text/plain',
      'Content-Type': 'application/json;charset=UTF-8'
    },
    method: 'POST',
    body: JSON.stringify({
      email: username,
      password: password
    })
  }).then(response => responseResult(response, 201, signUpSucessful(response, username, password), signUpFail(response))).catch(err => log(err));
}

function getAuth() {
  var email = $('#email').val();
  var password = $('#password').val();
  console.log(password);
  return [email, password];
}

function write_cookie(name, value) {
  // Build the expiration date string:
  var expiration_date = new Date();
  expiration_date.setYear(2025);
  expiration_date = expiration_date.toGMTString(); // Build the set-cookie string:

  var cookie_string = name + "=" + value + "; expires=" + expiration_date; // Create/update the cookie:

  document.cookie = cookie_string;
}

function read_cookie(key, skips) {
  // Set skips to 0 if parameter was omitted:
  if (skips == null) skips = 0; // Get cookie string and separate into individual cookie phrases:

  var cookie_string = "" + document.cookie;
  var cookie_array = cookie_string.split("; "); // Scan for desired cookie:

  for (var i = 0; i < cookie_array.length; ++i) {
    var single_cookie = cookie_array[i].split("=");
    if (single_cookie.length != 2) continue;
    var name = single_cookie[0];
    var value = single_cookie[1]; // Return cookie if found:

    if (key == name && skips-- == 0) return value;
  } // Cookie was not found:


  return null;
}

function saveToken(resp) {
  resp.json().then(data => {
    var token = data.token;
    write_cookie('token', token);
  });
}

$('.modal .cross').on('click', () => {
  $('.modal').removeClass('vis');
});
$(document).mouseup(e => {
  var modal = $('.sign-block');

  if (!modal.is(e.target) && modal.has(e.target).length === 0) {
    $('.modal').removeClass('vis');
  }
});
$('#next').on('click', () => {
  signUp(getAuth());
}); ///////////////////////////////////////////////////////////
///////////////////// ROOOM SETTINGS //////////////////////

var Time_sheme = {
  1: {
    Start: '8:30',
    Stop: '10:05'
  },
  2: {
    Start: '10:25',
    Stop: '12:00'
  },
  3: {
    Start: '12:20',
    Stop: '13:55'
  },
  4: {
    Start: '14:15',
    Stop: '15:50'
  },
  5: {
    Start: '16:10',
    Stop: '17:45'
  }
};

var createSlider = (id, min, max, startVal, secVal) => {
  var slider = {
    id: '#' + id,
    getSilderData: function getSilderData() {
      var inp1 = $(this.id).find('#a');
      var inp2 = $(this.id).find('#b');
      this.val1 = parseInt(inp1.val()) < parseInt(inp2.val()) ? inp1.val() : inp2.val();
      this.val2 = parseInt(inp1.val()) > parseInt(inp2.val()) ? inp1.val() : inp2.val();
    },
    oninput: function oninput(callback) {
      var id_targert = '#' + $(this.id).attr('for');
      this.getSilderData();
      callback($(id_targert));
      addEventListener('input', e => {
        this.getSilderData();
        callback($(id_targert));
      }, false);
    }
  };
  $(slider.id).html("\n        <div class='wrap' role='group' aria-labelledby='multi-lbl'>\n            <label class='sr-only' for='a'></label>\n            <input id='a' type='range' max='".concat(max, "' value='").concat(startVal, "' min='").concat(min, "'>\n            <label class='sr-only' for='b'></label>\n            <input id='b' type='range' max='").concat(max, "' value='").concat(secVal, "' min='").concat(min, "'>\n        </div>\n        "));
  return slider;
};

var changeSheme = new_sheme => {
  Time_sheme = new_sheme;
  $('.sheme .displays').each(function (i) {
    var index = i + 1;

    for (var value of ['.Start', '.Stop']) {
      var hs = $("#displays".concat(index)).find(value).find('.hours');
      var mins = $("#displays".concat(index)).find(value).find('.minutes');

      for (var k = 0; k < 2; k++) {
        hs.find(".timenumber:eq(".concat(k, ") span")).text(hours[k]);
        mins.find(".timenumber:eq(".concat(k, ") span")).text(minutes[k]);
      }
    }
  });
};

$('.sheme .slider-range').each(function (i) {
  var index = i + 1;
  var slider = createSlider("slider-range".concat(index), 0, 216, 54, 96);
  slider.oninput(function (target) {
    var values = [slider.val1, slider.val2];

    for (var j = 0; j < 2; j++) {
      var hours = Math.floor(values[j] / 12);
      hours = hours + 6;
      hours = (hours + '').split('');
      if (hours.length == 1) hours.unshift('0');
      var minutes = values[j] % 12;
      minutes = minutes * 5;
      minutes = (minutes + '').split('');
      if (minutes.length == 1) minutes.unshift('0');
      var sel = ['.Start', '.Stop'][j];
      Time_sheme[index][sel.split('.')[1]] = hours[0] + hours[1] + ':' + minutes[0] + minutes[1];
      var hs = target.find(sel).find('.hours');
      var mins = target.find(sel).find('.minutes');

      for (var k = 0; k < 2; k++) {
        hs.find(".timenumber:eq(".concat(k, ") span")).text(hours[k]);
        mins.find(".timenumber:eq(".concat(k, ") span")).text(minutes[k]);
      }
    }
  });
});

function timeShemesPost(sheme_name) {
  var token = read_cookie('token');
  window.fetch('/api/timeshemes/', {
    headers: {
      'Accept': 'application/json, text/plain',
      'Content-Type': 'application/json;charset=UTF-8',
      'Authorization': "Token ".concat(token)
    },
    method: 'POST',
    body: JSON.stringify({
      name: sheme_name,
      items: Time_sheme
    })
  }).then(response => responseResult(response, 201, response => {
    response.json().then(data => log(data));
  }, () => {
    throw Error("Error response status is ".concat(response.status));
  })).catch(err => log(err));
}

function createRoomPost(room_settings) {
  window.fetch('/api/listRooms/', {
    headers: {
      'Accept': 'application/json, text/plain',
      'Content-Type': 'application/json;charset=UTF-8',
      'Authorization': "Token ".concat(token)
    },
    method: 'POST',
    body: JSON.stringify(room_settings)
  }).then(response => responseResult(response, 201, (response => {
    response.json().then(data => log(data));
  })(response), () => {
    throw Error("Error response status is ".concat(response.status));
  })).catch(err => log(err));
}

function getTimeShemes() {
  return _getTimeShemes.apply(this, arguments);
}

function _getTimeShemes() {
  _getTimeShemes = _asyncToGenerator(function* () {
    var token = read_cookie('token'); // var shemes = []

    var response = yield window.fetch('/api/timeshemes/', {
      headers: {
        'Accept': 'application/json, text/plain',
        'Content-Type': 'application/json;charset=UTF-8',
        'Authorization': "Token ".concat(token)
      },
      method: 'GET'
    });
    return yield response.json();
  });
  return _getTimeShemes.apply(this, arguments);
}

$('#shemes').click( /*#__PURE__*/_asyncToGenerator(function* () {
  var time_shemes = yield getTimeShemes();
  log(time_shemes);
  var options = "";

  for (var sheme of time_shemes) {
    options = options + "<option>".concat(sheme.name, "</option>");
  }

  $('#namesheme').html(options);
}));
$('#submitsheme').click(() => {
  var sheme_name = $('.label #timeshemename').val();

  if (sheme_name != '') {
    timeShemesPost(sheme_name);
  } else {
    $('.label #timeshemename').attr('placeholder', "Input name please");
    goTo($('.label #timeshemename'));
  }
});
$('#createroom').click(() => {
  if ($('#namesheme').val() == '...') {
    $('#error-message h4').text("Error Time sheme field is empty");
    return;
  }

  for (var inp_el of ['start-date', 'end-date', 'name']) {
    var inp_el_formated = inp_el.charAt(0).toUpperCase() + inp_el.slice(1);

    if ($(".label #".concat(inp_el)).val() == '') {
      inp_el_formated = inp_el_formated.split('-');
      inp_el_formated[1] = inp_el_formated[1] == undefined ? '' : inp_el_formated[1];
      $('#error-message h4').text("Error ".concat(inp_el_formated[0] + ' ' + inp_el_formated[1], " field is empty"));
      return;
    }
  }

  var room_settings = {};

  room_settings.addField = function (field_name) {
    var id = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : field_name;
    room_settings[field_name] = $(".label #".concat(id));
  };

  room_settings.addField('name');
  room_settings.addField('period');
  room_settings.addField('start_date', 'start-date');
  room_settings.addField('end_date', 'end-date');
  room_settings.addField('public');
  room_settings.addField('time_shema');
  createRoomPost(room_settings);
});